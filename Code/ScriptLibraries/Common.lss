'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Explicit
Use "TIMEUtilities"




'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class BaseApplication
Declare Class BaseCSStringTable
Declare Class BaseEventOwnerStringTable As BaseCSStringTable
Declare Class MeetingOwnerStringTable As BaseEventOwnerStringTable
Declare Class TaskOwnerStringTable As BaseEventOwnerStringTable
Declare Class BaseEventParticipantStringTable As BaseCSStringTable
Declare Class MeetingParticipantStringTable As BaseEventParticipantStringTable
Declare Class TaskParticipantStringTable As BaseEventParticipantStringTable
Declare Class MessageTrackStringTable
Declare Class MailToolsStringTable
Declare Class MemoStringTable
Declare Class OrgGSMigrationStringTable
Declare Class CopyFactory
Declare Class BaseNoteCopy
Declare Class MemoCopy As BaseNoteCopy
Declare Class CalendarCopy As BaseNoteCopy
Declare Class TaskCopy As BaseNoteCopy
Declare Class GroupCalendarCopy As BaseNoteCopy
Declare Sub NAMEGetComponents(sUserName As String,sRetAbbreviatedName As String,sRetDomain As String)
Declare Function NAMECompare(sName1 As String, sName2 As String) As Integer
Declare Function NAMEFindInList(sKeyName As String, vListOfNames As Variant) As Integer
Declare Function NAMECompareWildcards(Byval sName As String,sWildcard As String) As Integer
Declare Function NAMEGetNumOrgUnits(sName) As Integer
Declare Function CSGetMailFileOwner() As String
Declare Function NOTEUserIsCreator(note As NotesDocument) As Integer
Declare Function NAMEExistsInList(sKeyName As String, vLIstOfNames As Variant) As Integer
Declare Function NOTECopyIntoNewDocument(Byval iNewType As Integer, Byval iFlags As Integer, note As NotesDocument, strnewform As String) As NotesDocument
Declare Function YesNoPrompt(sPrompt As String, sTitle As String) As Integer
Declare Function YesNoCancelPrompt(sPrompt As String, sTitle As String) As Integer
Declare Function DisplayWarn(sError As String, nPrompt As Integer, sTitle As String) As Integer
Declare Function CSEventDTItemsModified(vBEObject As Variant) As Integer
Declare Function CSEventNeedsReschedule(vBEObject As Variant) As Integer
Declare Sub CSDocOpen(vBEObject As Variant, note As NotesDocument, dtCalInstance As NotesDateTime, Byval dOptions As Long)
Declare Sub CSDocSave(vBEObject As Variant, vCallBackObject As Variant, Byval dAction As Long, Byval dOptions As Long, vContinue As Variant)
Declare Sub CSDocSaveCalendarEntry(vBEObject As Variant, bOwner As Integer, strCurrentType As String)
Declare Sub CSDocSendPrimaryNotice(vBEObject As Variant, vCallBackObject As Variant, vContinue As Variant)
Declare Sub CSDocUpdatePersonalCategories(note As NotesDocument, profile As NotesDocument)
Declare Sub CSExtAppDocSave(note As notesdocument, Byval daction As Long, bIsTask As Integer, vContinue As Variant)
Declare Sub wInstantiateObjectVariables
Declare Sub wMessagePageHeader
Declare Sub CopyProfileValues(noteSrc As NotesDocument, noteDest As NotesDocument)
Declare Sub SetInternationalFormatHelpers( note As NotesDocument)
Declare Sub wMarkTempFields(doc As NotesDocument)
Declare Sub wCreateDefaultCalendarProfile
Declare Function wGetCalendarProfile As Integer
Declare Sub CSDocSaveRepeatingEntry(vBEobject As Variant, nUpdateInfoOverWrite As Integer)
Declare Function CSGetMainEventObject(vBEObject As Variant) As Variant
Declare Function CSNoteGetType(note As notesdocument) As Integer
Declare Function CSProfileGetAutoAnnivRepeat() As Integer
Declare Function CSEventPerformAction(vBEObject As Variant, Byval strAction As String, Byval bSendNow As Integer, vArgs As Variant) As Integer
Declare Function CSEventPerformActionGuts(vBEObject As Variant, strAction As String, bSendNow As Integer, vArgs As Variant) As Integer
Declare Sub CSDocScanForUpdates ( beobject As Variant, vCallBackObj As Variant)
Declare Function wReturnReceipt( note As notesdocument )
Declare Function IsDocAltNameCandidate(note As notesdocument) As Integer
Declare Sub PopulateSendTo()
Declare Sub NABResolveName( Byval strName As String, listResolved List As String, view As notesview, listGroups List As String)
Declare Sub NABResolveAllNames()
Declare Sub MEMOReplyToAll(note As notesdocument)
Declare Function NameConstructIDList(strName As String,strOwnerDomain As String, strFromDomain As String) As Variant
Declare Function Min(nInt1 As Integer, nInt2 As Integer) As Integer
Declare Function isOEMClient(session As NotesSession) As Integer
Declare Function NameCreateCopyList(strName As String,strOwnerDomain As String, strFromDomain As String,vList As Variant) As Variant
Declare Function NameExtractDomain(strDomainString As String) As String
Declare Function NameIsX400(strName As String) As Integer
Declare Function NameIsRoutingDomain(strName As String) As Integer
Declare Function NameBypassTable(strName As String, nOptimizeLocalDomain As Integer) As Integer

'++LotusScript Development Environment:2:5:(Declarations):0:10
'Common: 
%INCLUDE "lsconst.lss"
%INCLUDE "orgconst.lss"
Const USER_MAILDOCUMENT_SELECTED = CS_SHARED_STRING + 29
Const REINIT_PROMPT = CS_SHARED_STRING+30
Const USER_NONWORKFLOW = CS_SHARED_STRING+31
Const ERR_LOOPFACTOR_ZERO = CS_SHARED_STRING + 32
Const ERR_LOOPFACTOR_TWO = CS_SHARED_STRING + 33
Const REPEAT_INITERROR = CS_SHARED_STRING + 34
Const SINGLE_INITERROR = CS_SHARED_STRING + 35
Const USER_MUST_ACCEPTPARENT = CS_PART_STRING+18
Const USER_ALREADY_ACCEPTED = CS_PART_STRING+19
Const USER_ALREADY_DECLINED = CS_PART_STRING+20
Const USER_ALREADY_DELEGATED = CS_PART_STRING+21
Const CANCEL_UPDATE_MSG = CS_PART_STRING+22
Const UIT_DLG_TITLE = CS_PART_STRING+23
Const REM_ROOM_TITLE=CS_OWNER_STRING+22
Const REM_ROOM=CS_OWNER_STRING+23
Const REM_RESOURCE_TITLE=CS_OWNER_STRING+24
Const REM_RESOURCE=CS_OWNER_STRING+25
Const ERR_OWNER = CS_OWNER_STRING+27
Const UPD_INFO_TITLE = CS_OWNER_STRING+28
Const ERR_CANCELLED = CS_OWNER_STRING+29
Const ERR_DRAFT = CS_OWNER_STRING+30
Const ENTRY_DTRMOD = CS_OWNER_STRING+31
Const ENTRY_DTRCUST = CS_OWNER_STRING+32
Const ERR_TODO_DRAFT =  CS_OWNER_STRING+33
Const DELTA_SHIFT_WARNING = CS_OWNER_STRING+34
Const ACTION_OPENCANCELLATION 	= &h01000000&
Const CS_TABLE_LIST = &h00000061&

'Back end classes
Dim session As NotesSession
Dim db As NotesDatabase
Dim note As NotesDocument
Dim profile As NotesDocument
Dim item As NotesItem
Dim NameLookup As NotesName
Dim agentlog As noteslog 
Dim PathAndName As String


'General Purpose classes
Dim Owner As String
Dim NewDocument As Integer

'Client Differenciation
Dim IsWebClient As Variant

'Web state
Dim IsWebBeingSaved As Integer

Class BaseApplication
 ' Properties
	m_session As NotesSession  ' pointer to current session object
	m_db As NotesDatabase    ' pointer to current database
	m_stringtable As Variant	' Reference to a StringTable object    	
	
	Property Get Session As NotesSession
		Set Session = m_session
	End Property
	
	Property Get Database As NotesDatabase
		Set Database = m_db
	End Property
	
	Property Get StringTable As Variant
		Set StringTable = m_stringtable
	End Property
	
	Property Get DocumentsToProcess As NotesDocumentCollection
		Set DocumentsToProcess = m_db.UnprocessedDocuments
	End Property
	
	Property Get LocalAddressBook As NotesDatabase
		Dim sAddressLine As String
		Dim nPos As Integer
		
		sAddressLine = m_session.getenvironmentstring("names",True)
		
		If Len(sAddressLine) Then
			nPos = Instr(sAddressLine,",")
			If (nPos = 0) Then
				Set LocalAddressBook = m_session.GetDatabase("",sAddressLine)
			Else
				Set LocalAddressBook = m_session.GetDatabase("",Left$(sAddressLine,nPos-1))
			End If
		Else
			Set LocalAddressBook = m_session.GetDatabase("","names.nsf")
		End If
	End Property
	
	
 ' Methods
	Sub New
		Set m_session = New NotesSession
		Set m_db = m_session.CurrentDatabase
	End Sub    
	
	Function CreateDocument As NotesDocument
		Set CreateDocument = New NotesDocument(m_db)
	End Function
	
End Class

Class BaseCSStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case INC_COMMENTS											' Include comments on reply notice
			GetString = "Do you want to include any comments on the reply?"
		Case ENTRY_PAST
			GetString = "This entry is being created in the past. Create anyway?"
		Case ALARM_TITLE
			GetString = "Alarm Notification Options"
		Case DBLBOOK_TITLE
			GetString = "Double Book"
		Case ERR_FREETIME
			GetString = "An error occurred while searching for free time. We are not able to perform conflict checking for you at this time. The meeting will be created and placed on your calendar. Continue?"
		Case RPTCHANGE_TITLE
			GetString = "Change Repeating Entry"		
		Case ENTRY_CONF
			GetString = "This entry conflicts with an existing entry. Create anyway?"
		Case WORK_CONF
			GetString = "This entry conflicts with an existing entry or your availability preferences. Create anyway?"	
		Case USER_INVALID_DOCUMENT
			GetString = "You must select an instance document to perform these actions."
		Case ERR_CREATE_REPEAT
			GetString = "The maximum number of repeat instances has been reached. Please reduce the number of instances that will be created."
		Case ERR_TITLE
			GetString = "Error"
		Case ERR_OWNER
			GetString = "You are not authorized to perform that operation."
		Case REPEAT_CONFLICT_PROMPT
			GetString = "The following dates conflict with existing entries or do not fit in your profile times:"
		Case REPEAT_CONFLICT_TITLE
			GetString = "Repeat Conflict"
		Case REPEAT_OPEN_PROMPT
			GetString = "Select the repeat instance date you wish to open:"
		Case REPEAT_OPEN_TITLE
			GetString = "Repeating Entries"	
		Case ENABLE_OUT_PROMPT
			GetString = "Would you like to setup the Out of Office agent to handle messages while you are away?"
		Case ENABLE_OUT_TITLE
			GetString = "Enable Out Of Office"
		Case RESOURCE_BOOKED_PROMPT
			GetString = "The specified resource is unavailable for the requested time. Please select a new time."
		Case RESOURCE_BOOKED_TITLE
			GetString = "Resource Unavailable"
		Case RESOURCE_FREETIME_ERR_PROMPT
			GetString = "An error occurred while validating the available time for this resource. Please try again later."
		Case WEB_GOBACK
			GetString = "Go Back"
		Case REPEAT_PASTE_PROMPT
			GetString = "The copied entry is a repeating entry. The new entry pasted will be created as a single, non-repeating entry."
		Case REPEAT_PASTE_TITLE
			GetString = "Paste Repeating Entry"		
		Case USER_MAILDOCUMENT_SELECTED
			GetString = "This action is not allowed on mail messages."			
		Case REINIT_PROMPT
			GetString = "The entry that has been rescheduled is no longer in your calendar.  Should Notes recreate the entry so that it can be rescheduled?  (Note that recreating the entry may take some time.)"
		Case USER_NONWORKFLOW
			GetString = "This action is not allowed on non-workflow entries."
		Case ERR_LOOPFACTOR_ZERO
			GetString = "You cannot perform that action on this entry.  Please open the original invitation."
		Case ERR_LOOPFACTOR_TWO
			GetString = "You already have an invitation for this meeting.  Please open this invitation for details."
		Case REPEAT_INITERROR
			GetString = "An error occurred trying to initialize this repeating entry.  You can continue deleting this entry, but Notes will not be able to cleanup notices associated with this entry, nor apply this action to only part of this entry."
		Case SINGLE_INITERROR
			GetString = "An error occurred trying to initialize this entry.  You can continue deleting this entry, but Notes will not be able to cleanup notices associated with this entry."
		Case Else
			GetString = ""
		End Select
	End Function
End Class

Class BaseEventOwnerStringTable As BaseCSStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case CANC_TITLE
			GetString = "Cancel Options"
		Case RESC_TITLE
			GetString = "Reschedule Options"
		Case STS_TITLE
			GetString = "Participant Status"
		Case MODTYPE_TITLE
			GetString = "Change entry type"
		Case PAST_TITLE
			GetString = "Create in Past"
		Case CONF_TITLE
			' GetString = "Confirm event" ' spr# FGRN3ZPNQY
			GetString = "Confirm Meeting"
		Case REM_PART
			GetString = "Select the participant(s) you wish to remove from this event."
		Case REM_PART_TITLE
			GetString = "Remove Participants"
		Case REPEAT_TITLE
			GetString = "Repeat Options"
		Case NO_SEND_LIST
			GetString = "There are no invitees to send the notice to."			
		Case USER_ACTION_INVALID
			GetString = "You are the owner of this entry. You cannot perform that particular action."
		Case CTRACPT_TITLE
			GetString = "Accept Counter"
		Case CTRDECL_TITLE
			GetString = "Decline Counter"
		Case WEB_TABLE_NAME
			GetString = "Name"
		Case WEB_TABLE_STATUS
			GetString = "Status"
		Case WEB_TABLE_ROLE
			GetString = "Role"			
		Case REM_ROOM
			GetString = "Select the room(s) you wish to remove from this event."
		Case REM_ROOM_TITLE
			GetString = "Remove Rooms"
		Case REM_RESOURCE
			GetString = "Select the resource(s) you wish to remove from this event."
		Case REM_RESOURCE_TITLE
			GetString = "Remove Resources"
		Case Else
			GetString = BaseCSStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class MeetingOwnerStringTable As BaseEventOwnerStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case ENTRY_TYPE
			GetString = "Changing the entry type will cancel this meeting. Change anyway?"			
		Case ENTRY_DTMOD
			GetString = "Are you sure you want to change the date/time of this entry?"
		Case ENTRY_DTRMOD
			GetString = "Are you sure you want to change the date/time of this entire repeating meeting?"
		Case ENTRY_DTRCUST
			GetString = "This meeting must be converted into a custom repeat, as you are outside of your repeat rule.  Continue? "
		Case DTMOD_TITLE
			GetString = "Change date/time"
		Case RESC_UPD_MSG
			GetString = "A reschedule notice will be sent to the invitees and any rooms/resources you may have requested informing them of this change. "& BaseEventOwnerStringTable..GetString(INC_COMMENTS, Null) 
		Case SEND_INV_MSG
			GetString = "Do you want to send meeting invitations to the appropriate users?"
		Case SEND_INVRES_MSG
			GetString = "Do you want to send meeting invitations and reservation requests?"
		Case SEND_INV_TITLE
			GetString = "Send Invitations"		
		Case VIEWSTATUS_NOMEMBERS_PROMPT
			GetString = "There are no invitees to view the status of at this time."
		Case UPD_INFO_TITLE
			GetString = "Send Updated Information"	
		Case ERR_CANCELLED
			GetString = "You cannot perform that action, because this meeting has been cancelled."
		Case ERR_DRAFT
			GetString = "You cannot perform that action, because this meeting is still a draft."
		Case DELTA_SHIFT_WARNING
			GetString = "You are rescheduling multiple instances of a repeating meeting." + Chr(13) + Chr(13) + _
			"These instances will all be shifted by the same relative amount of time including those that have been previously rescheduled. " + Chr(13) + _
			"Please be sure to review the effects of these changes." + Chr(13) + Chr(13) + _
			"Proceed with rescheduling?"
		Case Else
			GetString = BaseEventOwnerStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class TaskOwnerStringTable As BaseEventOwnerStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case ENTRY_TYPE
			GetString = "Changing the entry type will cancel this to do. Change anyway?"			
		Case ENTRY_DTMOD
			GetString = "Are you sure you want to change the date this to do is due?"
		Case ERR_TODO_DRAFT
			GetString = "You cannot perform that action, because this to do is still a draft."
		Case ENTRY_PAST
			GetString = "This to do is being created in the past. Create anyway?"
		Case SEND_INV_MSG
			GetString = "Send to do assignments to the appropriate users?"
		Case SEND_INV_TITLE
			GetString = "Send Assignments"		
		Case RESC_UPD_MSG
			GetString = "A reschedule notice will be sent to all participants of this to do informing them of this change. "& BaseEventOwnerStringTable..GetString(INC_COMMENTS, Null)
		Case VIEWSTATUS_NOMEMBERS_PROMPT
			GetString = "There are no invitees to view the status of at this time."
		Case Else
			GetString = BaseEventOwnerStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class BaseEventParticipantStringTable As BaseCSStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case PAST_TITLE
			GetString = "Past"
		Case ACPT_TITLE
			GetString = "Accept Options"
		Case DECL_TITLE
			GetString = "Decline Confirmation"
		Case UPD_TITLE
			GetString = "Update"
		Case DELE_TITLE
			GetString = "Delegate Options"			
		Case CNTR_TITLE
			GetString = "Propose Options"
		Case USER_ACTION_INVALID
			GetString = "You are a participant of this entry. You cannot perform that particular action."
		Case STATUS_TITLE
			GetString = "Status Update"
		Case ERR_SEND_DELE	' Make sure you have spelled their name correctly.
			GetString = "An error occurred sending the delegation notice to the delegee. Please delegate to someone else."
		Case USER_MUST_ACCEPT
			GetString = "You must accept an invitation before performing this action."		
		Case USER_MUST_ACCEPTPARENT
			GetString = "You must first accept the main repeat invitation before performing this action."
		Case USER_ALREADY_ACCEPTED
			GetString = "You have already accepted this invitation."
		Case USER_ALREADY_DECLINED
			GetString = "You have already declined this invitation."
		Case USER_ALREADY_DELEGATED
			GetString = "You have already delegated and can no longer act on this invitation."
		Case Else
			GetString = BaseCSStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class MeetingParticipantStringTable As BaseEventParticipantStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case RESC_MSG										' Reschedule notice
			GetString = "This meeting has been rescheduled. Would you like to open the reschedule notice?"
		Case CANCEL_MSG
			GetString = "This meeting has been cancelled."	' Message that appears for cancellation notices
		Case CANCEL_UPDATE_MSG						' move to cancellation notice ( calendar )
			GetString = "Part or all of this repeating meeting has been cancelled.  Would you like to open the Cancellation Notice and update your Calendar?"
		Case CANCEL_UPD
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " The calendar entry will be updated to reflect this change." 	' User accepted main invitation that is now cancelled
		Case CANCEL_NOACTN
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " You do not need to take any action."								' The main invitation has not been accepted	
		Case ADD_TITLE
			GetString = "Add to Calendar"
		Case STATUS_REMOVED
			GetString = "You are no longer required to attend part or all of this meeting. Your calendar will be updated to reflect this."
		Case STATUS_REQUIRED
			GetString = "You are required to attend this meeting. Your calendar will be updated to reflect this."
		Case ERR_BROADCAST
			GetString = "The chairperson of this meeting does not require replies."
		Case ERR_NO_DELEGATE
			GetString = "The chairperson of this meeting has prevented delegation. Please select a different action."
		Case ERR_NO_PROPOSE
			GetString = "The chairperson of this meeting has prevented proposals. Please select a different action."
		Case UIT_DLG_TITLE
			GetString = "You have Unprocessed Notices"  
		Case Else
			GetString = BaseEventParticipantStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Class TaskParticipantStringTable As BaseEventParticipantStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case RESC_MSG										' Reschedule notice
			GetString = "The due date or start date for this to do has been changed. Would you like to open the update notice?"
		Case CANCEL_MSG
			GetString = "This to do has been cancelled."	' Message that appears for all cancellation notices
		Case CANCEL_UPD
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " The to do entry will be updated to reflect this change." 	' User accepted main invitation that is now cancelled
		Case CANCEL_NOACTN
			GetString = Me.GetString(CANCEL_MSG, Nothing) & " You do not need to take any action."								' The main invitation has not been accepted	
		Case STATUS_REMOVED
			GetString = "You are no longer assigned to this To Do item. Your To Do list will be updated to reflect this."
		Case STATUS_REQUIRED
			GetString = "You are required to complete this To Do item. Your To Do list will be updated to reflect this."
		Case ERR_BROADCAST
			GetString = "The owner of this to do does not require replies. Select Participant Actions / Accept to add this to your to do list."
		Case ERR_NO_DELEGATE
			GetString = "The owner of this to do has prevented delegation. Please select a different action."
		Case ERR_NO_PROPOSE
			GetString = "The owner of this to do has prevented proposals. Please select a different action."
		Case CANCEL_UPDATE_MSG						' move to cancellation notice
			GetString = "Part or all of this repeating to do has been cancelled.  Would you like to open the Cancellation Notice and update your To Do List?"
		Case Else
			GetString = BaseEventParticipantStringTable..GetString(nIndex, vData)
		End Select
	End Function
End Class

Const TOOL_STRING = 400
Const MEMO_STRING = 500
Const TRACKING_STRING = 700

Class MessageTrackStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case TRACKING_STRING+1
			GetString = "UNKNOWN "
		Case TRACKING_STRING+2
			GetString = "In Que "
		Case TRACKING_STRING+4
			GetString = "DELIVERED "
		Case TRACKING_STRING+8
			GetString = "DELIVERY FAILED "
		Case TRACKING_STRING+16
			GetString = "TRANSFERED "
		Case TRACKING_STRING+32 
			GetString = "TRANSER FAILED "
		Case  TRACKING_STRING+64
			GetString = "GROUP EXPANDED "
		Case  TRACKING_STRING+65
			GetString = "Message Tracking"	
		Case  TRACKING_STRING+66
			GetString = "Please select recipient(s) to track."
		Case  TRACKING_STRING+67
			GetString = "You may only track messages that you have sent."
		Case  TRACKING_STRING+68
			GetString = "No recipient(s) were selected"
		Case TRACKING_STRING+69
			GetString = "No valid recipients could be located to track."			
		End Select
	End Function		
End Class

Class MailToolsStringTable
	Function GetString (nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case TOOL_STRING
			GetString = "Unable to locate your Name & Address Book.  Names not added."
		Case TOOL_STRING+1
			GetString = Str(vData) + " name(s) processed."
		Case TOOL_STRING+2
			GetString = Str(vData) + " name(s) added to your personal address book."
		Case TOOL_STRING+3
			GetString = Str(vData) + " name(s) not added; already in your personal address book."
		Case TOOL_STRING+4
			GetString = "Error adding name(s) to personal address book: " + Str(vData)
		Case TOOL_STRING+10
			GetString = "Unable to create a calendar entry for your time off."
		Case TOOL_STRING+11
			GetString = "An Out of office document has been added to your Calendar."
		Case TOOL_STRING+12
			GetString = "Would you like to create an Out of Office Calender entry?"
		Case TOOL_STRING+13
			GetString =  "Welcome Back!" & Chr(13)  & "Please disable your Out of Office Agent. To disable the agent, " & _
			"Open your Out of Office profile and select the 'Disable' button."  & Chr(13)_
			& "While you were out, the 'Out of Office' agent notified the following people of your absence." & Chr(13)
		Case TOOL_STRING+14
			GetString = "Welcome Back!" & Chr(13)  & "Please disable your Out of Office Agent. To disable the agent, " & _
			"Open your Out of Office profile and select the 'Disable' button."  & Chr(13)  &_
			"While you were out, your Out of Office Agent did not notify anyone of your absence."
		Case TOOL_STRING+15
			GetString = "Welcome Back!"
		Case TOOL_STRING+16
			GetString = "This is a repeat reminder!" & Chr(13)  & "Please disable your Out of Office Agent. To disable the agent, " & _
			"open your Out of Office profile and select the 'Enable/Disable' button."
		Case TOOL_STRING+17
			GetString = "Out of Office Profile ERROR"
		Case TOOL_STRING+18
			GetString = "ERROR: You must create an Out of Office profile BEFORE running your Out of Office Agent."
		Case TOOL_STRING+19
			GetString = "ERROR: You must enable your Out of Office profile BEFORE running your Out of Office Agent."
		Case TOOL_STRING+20
			GetString = "A request to enabled the Out of Office agent is in progress. Please wait momentarily for the server to enable the agent."
		Case TOOL_STRING+21
			GetString = "A request to disable the Out of Office agent is in progress. Please wait momentarily for the server to enable the agent."
		Case TOOL_STRING+22
			GetString = "Do you want to submit another request?"
		Case TOOL_STRING+23
			GetString = Chr(13) & "Proceed to enable the Out of Office agent?"		
		Case TOOL_STRING+31
			GetString = " can already read mail."
		Case TOOL_STRING+32
			GetString = " can already send mail."
		Case TOOL_STRING+33
			GetString = " can already edit documents."
		Case TOOL_STRING+34
			GetString = " can already manage the calendar."
		Case TOOL_STRING+37
			GetString = vData & Chr(13) & "Managers and Designers cannot be modified using the Delegation Profile."
		Case TOOL_STRING+38
			GetString =   "You must add " & Str(vData) & " to either the ""Read and send"" or the ""Read, send, and edit"" list before adding them to the ""Delete"" list."
		Case TOOL_STRING+39
			GetString =   "You must add " & Str(vData) & " to either the ""Read and send"" or the ""Read, send, and edit"" list before adding them to the ""Delete"" list."
		Case TOOL_STRING+40
			GetString =   Str(vData) & " is currently a Manager of this database." 
		Case TOOL_STRING+41
			GetString = Str(vData) & " is currently a Designer of this database. "
		Case TOOL_STRING+42
			GetString = "You do not have the priviledge to change the ACL settings in this database."
		Case TOOL_STRING+43
			GetString = "Reminder Please Turn Off your Out Of Office Agent"
		Case TOOL_STRING+44			
			GetString = "Your Out of Office agent is still enabled."			
		Case TOOL_STRING+45
			GetString = "Please ask the database owner or a system administrator to disable the agent for you."
		Case TOOL_STRING+46
			GetString = "Lotus Notes Out of Office"
		Case TOOL_STRING+47
			GetString = "Your 'Out of Office' agent is currently enabled."
		Case TOOL_STRING+48
			GetString = "Do you want to disable it ?"
		Case TOOL_STRING+49
			GetString = "Your Out of Office has been disabled."
		Case TOOL_STRING+50
			GetString = "Please ask the database owner or a system administrator to enable the agent for you."
		Case TOOL_STRING+51
			GetString = "Your current location doesn't have a 'Mail Server' specified."'
		Case TOOL_STRING+52
			GetString = "Please edit your current record and specify your Mail Server."
		Case TOOL_STRING+53
			GetString = "The Out of Office agent is now enabled to run on the following server: "			
		Case TOOL_STRING+54
			GetString = "When people send you mail between "
		Case TOOL_STRING+55
			GetString = " and " &  vData & " it will inform them of your absence."
		Case TOOL_STRING+56
			GetString = "The Out of Office agent was not enabled."
		Case TOOL_STRING+57
			GetString = "You must indicate when you are leaving and when you will be back."
		Case TOOL_STRING+58
			GetString = "Your return date must be after today's date."
		Case TOOL_STRING+59
			GetString = "Your return date cannot be earlier than the leave date."
		Case TOOL_STRING+60
			GetString = "Your return date must be after your leave date."
		Case TOOL_STRING+61
			GetString = "Preferences"
		Case TOOL_STRING+62
			GetString = "Add Sender to Address Book"
		Case TOOL_STRING+63
			GetString = "A contact with your name should not be added to your address book." & Chr(13) & "Continue adding this entry?"
		Case TOOL_STRING+64
			GetString = Cstr(vData) & " conflicts"
		Case TOOL_STRING+65
			GetString = "Are you sure you wish to exit without enabling your Out of Office agent?"
		Case TOOL_STRING+66
			GetString = |You have disabled the Out of Office agent for the dates you have indicated.| & Chr(13) &_ 
			|Your calendar status is currently set to show you to other people as "Unavailable" on those dates.| & Chr(13) &_ 
			|Do you wish to change the setting for those dates to "Available"?|
		Case TOOL_STRING+67
			GetString = |Unable to show you to other people as "available" for your 'Out of Office' calendar entry.| & Chr(13) & |Entry not found.|
		Case TOOL_STRING+68
			GetString = "Only the Owner or a Manager may modify the value of 'Owner'"
		Case TOOL_STRING+69
			GetString = "Your name cannot be found in the ACL, please contact your administrator."
		Case TOOL_STRING+70
			GetString = "You do not have sufficient rights to edit preferences for this database"
		Case TOOL_STRING+71
			GetString = "The 'Owner' of a mail file should be specified in 'Hierarchical' format." & Chr(13) &  "i.e. John Doe/MyDomain"			
		Case TOOL_STRING+72
			GetString = "Error creating AdminP request, please contact your administrator"			
		Case TOOL_STRING+73
			GetString = "No valid documents were selected, 'From' field is required"			
		Case TOOL_STRING+74
			GetString = "Would you like to modify the archive settings?"
		Case TOOL_STRING+75
			GetString = "Archive"
		Case TOOL_STRING+76
			GetString = "Do you wish to archive the " & Cstr(vData) & " selected documents now?"
		Case TOOL_STRING+77
			GetString = "Do you wish to archive now?"
		Case TOOL_STRING+78
			GetString = "You must choose 'Enable scheduled local agents' on the 'Basics' tab of the 'User Preferences dialog' before this change will take effect."
		Case TOOL_STRING+79
			GetString = "This must be a local database to activate local scheduled archiving."
		Case TOOL_STRING+80
			GetString = "Permanently remove the selected rule(s) from the database?"			
		Case TOOL_STRING+81
			GetString = "Delete Rule"						
		Case TOOL_STRING+82
			GetString = |You will not be able to undo this operation nor restore selected document(s).
Continue permanently deleting the selected document(s)?|		
		Case TOOL_STRING+83
			GetString = "Delete from calendar"												
		Case TOOL_STRING+84
			GetString = "An error occured inserting the following signature(s) into their contact record..." & Chr(10) & Cstr(vData)			
		Case TOOL_STRING+85
			GetString = "Remove"			
		Case TOOL_STRING+86
			GetString = "Remove selected document(s) from database?"				
		Case TOOL_STRING+87
			GetString = "You have requested to enable the Out of Office agent to run on the following server: "
		Case TOOL_STRING+88
			GetString = "Out of Office agent can only be enabled by the database owner. " & Chr(10) & "Please open Tools - Preferences and set the mail file owner. "
		Case TOOL_STRING+89
			GetString = "This document cannot be modified.  It contains the original information for a repeating To Do from when the task was first created.  If you wish to apply changes, open the document corresponding to a specific occurrence of the To Do."
		Case TOOL_STRING+90
			GetString = "This document cannot be modified.  It contains the original information for a repeating meeting from when the meeting was first created.  If you wish to apply changes, select a specific occurrence of the meeting."
		Case TOOL_STRING+91
			GetString = "Please select an online meeting place for this online meeting."		
		End Select	
	End Function
End Class

Class MemoStringTable
	
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case MEMO_STRING   ' task notification mail message
			GetString = "Notfication has been sent to "
		Case MEMO_STRING+1   ' name a stationery document
			GetString = "What would you like to call this stationery?"
		Case MEMO_STRING+2
			GetString = "This action cannot be performed on a new document."
		Case MEMO_STRING+3
			GetString = "Please select one document before executing this command."
		Case MEMO_STRING+4   ' user trying to copy a document that has the prevent copy bit set
			GetString = "This document is prevented from being copied.  The body will not be copied into the new document."              
		Case MEMO_STRING+5
			GetString = "Mail Schedule Profile not found.  You must define your Mail schedule profile before you can schedule a document."
		Case MEMO_STRING+6
			GetString = "Your Mail Scheduler agent is currently disabled.  The agent must be enabled before you can schedule a document."
		Case MEMO_STRING+7
			GetString = "Unable to locate your mail schedule profile.  A mail schedule profile must exist in your database before you can schedule a document."
		Case MEMO_STRING+8
			GetString = "Your Mail scheduling profile is not configured to run the Notes mail scheduler.  You must set the current status to enabled in order to schedule a document."
		Case MEMO_STRING+9
			GetString = Str(vData) & " document(s) processed."
		Case MEMO_STRING+10
			GetString = "The document(s) can be referenced via your Drafts view."
		Case MEMO_STRING+11
			GetString = Str(vData) & " document(s) put on hold."
		Case MEMO_STRING+12
			GetString = Str(vData) & " document(s) scheduled."
		Case MEMO_STRING+13
			GetString = Str(vData) & " document(s) no longer accessible from this view."
		Case MEMO_STRING+14
			GetString = "No Mail Schedule Profile"
		Case MEMO_STRING+15
			GetString = "You must enter a 'SendTo' name in order to schedule a document."
		Case MEMO_STRING+16
			GetString = "Lotus Notes"
		Case MEMO_STRING+17
			GetString = "-Untitled-"			
		Case MEMO_STRING+18
			GetString = "Include Signature"
		Case MEMO_STRING+19
			GetString = "Please place the cursor at the desired insertion point of the body field."
		Case MEMO_STRING+20
			GetString = "Do you wish to save this document?"
		Case MEMO_STRING+21
			GetString = "Address recipients"
		Case MEMO_STRING+22
			GetString = "Do you wish to save this new stationery?"
		Case MEMO_STRING+23
			GetString = "Do you wish to save this new message?"
		Case MEMO_STRING+24
			GetString = "Do you wish to save this new entry?"
		End Select
	End Function
End Class

Class OrgGSMigrationStringTable
	Function GetString(nIndex As Integer, vData As Variant) As String
		Select Case nIndex
		Case 0
			GetString= "Telephone Number:"
		Case 1
			GetString = "Call Entry:"
		Case 2
			GetString = "ext."
		Case 3
			GetString = "Duration:"
		Case 4
			GetString = "hours"
		Case 5
			GetString = "minutes"
		Case 6
			GetString = "Customer Code:"
		Case 7
			GetString = "Cost Code:"
		Case 8
			GetString = "Do you want to overwrite the existing file?"
		Case 9
			GetString = vData & " does not exist.   Please specify an existing Journal database or choose the Create new Journal option."
		Case 10
			GetString = "Started:"
		Case 11
			GetString = "Company:"
		Case 12
			GetString = "Status:"
		Case 13
			GetString = "Organizer 97 GS Migration"
		Case 14
			GetString = "Warning:  Journal databases are not password protected.   Please use File - Database - Properties - Encryption Settings if you wish to locally encrypt this database."
		Case 15
			GetString = "Notes:"
		Case 16
			GetString = "Don't use Country and Area Codes: "
		End Select
	End Function
End Class


Class CopyFactory
	'**This is a method for creating new copy objects
	'** It ensures that all documents will be mapped to their correct
	'** copy object
	Function createFromExisting( note As NotesDocument) As BaseNoteCopy
		If Not note Is Nothing Then
			Select Case Lcase( note.GetItemValue( "Form")(0))
			Case "memo","reply"
				Set createFromExisting = New MemoCopy( note)
			Case "appointment"
				Set createFromExisting = New CalendarCopy( note)
			Case "task"
				Set createFromExisting = New TaskCopy( note)
			Case "(groupcalendar)"
				Set createFromExisting = New GroupCalendarCopy( note)
			Case Else
				Set createFromExisting = New BaseNoteCopy( note)
			End Select
		Else
			Set createFromExisting = New BaseNoteCopy( Nothing)
		End If
	End Function
	
	Function createNew( nType As Integer) As BaseNoteCopy
		Select Case nType
		Case CREATE_MEMO
			Set createNew = New MemoCopy( Nothing)
		Case CREATE_CALENDAR
			Set createNew = New CalendarCopy( Nothing)
		Case CREATE_TASK
			Set createNew = New TaskCopy( Nothing)
		Case CREATE_GROUPCALENDAR
			Set createNew = New GroupCalendarCopy( Nothing)
		End Select
	End Function
End Class

Class BaseNoteCopy
	'**This class defines an interface for copying items from one document to another
	Private m_session As NotesSession
	Private m_db As NotesDatabase
	Private m_note As NotesDocument
	Public copyIntoAsLink As Integer
	Private m_maps List As Variant
	
	Sub new (note As NotesDocument)
		Set m_note = note
		If m_note Is Nothing Then
			Set m_session = New NotesSession
			Set m_db = m_session.currentDatabase
			Set m_note = m_db.createDocument
			Call setNewNoteInfo
		Else
			Set m_db = m_note.parentDatabase
			Set m_session = m_db.parent
		End If
		
		Dim tempMaps As Variant
		tempMaps = Evaluate( |@Explode("| & ItemMapsStr & |"; ";")| )
		Forall aMapStr In tempMaps
			Dim tempArray As Variant
			tempArray = Evaluate( |@Explode("| & aMapStr & |"; "||")| )
			Forall x In tempArray
				m_maps( x) = tempArray
			End Forall
		End Forall
		
	End Sub
	
	Public Property Get document As NotesDocument
		Set document = m_note 
	End Property
	
	Private Sub setNewNoteInfo
		'This method is used to write information
		'to the document if it's new.
		'It is meant to be overridden and used to set items such as form
		m_note.replaceItemValue"Principal", CSGetMailFileOwner()
		m_note.replaceItemValue"From",CSGetMailFileOwner()
		'm_note.replaceItemValue"From", CSGetMailFileOwner()
		Call m_note.replaceitemvalue("tmpNewDoc","1")
	End Sub
	
	Public Function getBodyItem As NotesRichTextItem
		'This will get the body item.  If the body item in not richtext
		'then it converts in into richtext
		
		Dim body As NotesItem
		Dim rtBody As NotesRichTextItem
		
		If m_note.hasItem( "Body") Then
			Set body = m_note.getFirstItem( "Body")
			If body.type = RICHTEXT Then
				Set getBodyItem = body
			Else
				Dim tempStr As String
				tempStr = body.text
				body.remove
				Set rtBody = New NotesRichTextItem( m_note, "Body")
				rtBody.appendText( tempStr)
				
				Set getBodyItem = rtBody
			End If
		Else
			Set getBodyItem = New NotesRichTextItem( m_note, "Body")
		End If
	End Function
	
	Public Sub copyIntoBody( noteToCopy As BaseNoteCopy)
		Dim body As NotesRichTextItem
		Set body = Me.getBodyItem
		
		If copyIntoAsLink Then 
			If Not noteToCopy.document.isNewNote Then	Call body.AppendDocLink(noteToCopy.document,"")
		Elseif Not noteToCopy.document.getItemValue( "$KeepPrivate")(0) = "1" And noteToCopy.document.hasItem( "Body") Then		
			body.AddNewLine 2
			body.AppendText "__________________"
			body.AddNewLine 2
			body.appendRTItem noteToCopy.getBodyItem
		End If
	End Sub
	
	Function element0( x As Variant) As String
		element0= x(0)
	End Function
	
	Public Function copyIntoMe( ToCopy As BaseNoteCopy)
		Dim noteToCopy As NotesDocument
		Dim vNamePref As Variant
		Set noteToCopy = ToCopy.document
		
		' Get user's name preference from the location document
		vNamePref = Evaluate(|@LocationGetInfo([NamePreference])|)
		
		copyIntoBody ToCopy		
		copyOtherStuff ToCopy
		
		Forall copyMap In ToCopy.m_maps 
			If Iselement( m_maps(Listtag(copyMap) )) Then
				If noteToCopy.hasItem( Listtag(copyMap)) Then
					Dim sFieldName As String
					sFieldName = Listtag(copyMap)
					
					If vNamePref(0) = "1" Then
						' If this is an alternate name mode,
						' look-up the field mapping table and use alternate name field if available
						Dim vAltMaps As Variant
						' load the mapping table
						vAltMaps = Evaluate( |@Explode("| & AltFieldMapsStr & |"; ";")| )
						Forall aAltMapStr In vAltMaps
							Dim vFieldPair As Variant
							vFieldPair = Evaluate( |@Explode("| & aAltMapStr & |"; "||")| )
							If vFieldPair(0) = Listtag(copyMap) Then
								If noteToCopy.hasItem(vFieldPair(1)) Then
									' found the alternate name field in the original doc
									sFieldName = vFieldPair(1)
								End If
								Exit Forall
							End If
						End Forall
					End If
					
					' copy it
					copyItem noteToCopy.getFirstItem(sFieldName), element0(m_maps(Listtag(copyMap)))					
				End If 
			End If
		End Forall
		
		postCopyProcessing ToCopy
	End Function
	
	Private Sub copyItem( item As NotesItem, itemName As String)		
		If Not item Is Nothing Then
			If m_note.hasItem( itemName ) Then
				m_note.removeItem itemName
			End If
			'If data type = RFC822 text then this needs to be converted to type text 1280.
			'Use replaceItemValue to set new item of type text 1280.
			If item.Type = 1282 Then
				Call m_note.ReplaceItemValue(item.Name, item.Values(0))
			Else
				m_note.copyItem item, itemName 
			End If
		End If
	End Sub
	
	Private Sub copyOtherStuff( toCopy As BaseNoteCopy)
		'**this is used to copy special case items.  meant to be overidden
	End Sub
	
	Private Sub postCopyProcessing( toCopy As BaseNoteCopy)
		'**this is used to process the document after all the copying is done.  meant to be overidden
	End Sub
	
	Property Get ItemMapsStr As String
		ItemMapsStr = "Subject|Topic;EnterSendTo|SendTo|AssignedTo|RequiredAttendees;EnterCopyTo|CopyTo|OptionalAttendees|OptionalAssignedTo;EnterBlindCopyTo|BlindCopyTo|FYIAttendees|FYIAssignedTo;DragAndDrop;AppointmentType"
	End Property
	
	Property Get AltFieldMapsStr As String
		AltFieldMapsStr = "SendTo|AltSendTo;AssignedTo|AltRequiredNames;RequiredAttendees|AltRequiredNames;CopyTo|AltCopyTo;OptionalAttendees|AltOptionalNames;OptionalAssignedTo|AltOptionalNames;BlindCopyTo|AltBlindCopyTo|FYIAttendees|AltFYINames;FYIAssignedTo|AltFYINames"
	End Property
	
	Private Sub ClearWorkflow()
		Call m_note.RemoveItem("SendTo")
		Call m_note.RemoveItem("CopyTo")
		Call m_note.RemoveItem("BlindCopyTo")
		Call m_note.RemoveItem("EnterSendTo")
		Call m_note.RemoveItem("EnterCopyTo")
		Call m_note.RemoveItem("EnterBlindCopyTo")
		Call m_note.RemoveItem("INetSendTo")
		Call m_note.RemoveItem("INetCopyTo")
		Call m_note.RemoveItem("INetBlindCopyTo")
		Call m_note.RemoveItem("AltSendTo")
		Call m_note.RemoveItem("AltCopyTo")
		Call m_note.RemoveItem("AltBlindCopyTo")
		Call m_note.RemoveItem("$StorageTo")
		Call m_note.RemoveItem("$StorageCc")
		Call m_note.RemoveItem("$StorageBcc")
		Call m_note.RemoveItem("$NameLanguageTags")
		Call m_note.RemoveItem("$NamePreference")
		Call m_note.RemoveItem("RoomToReserve")
		Call m_note.RemoveItem("Resources")
	End Sub
	
End Class

Class MemoCopy As BaseNoteCopy
	Sub new (note As NotesDocument), BaseNoteCopy( note)
	End Sub
	
	Private Sub setNewNoteInfo
		BaseNoteCopy..setNewNoteInfo
		m_note.replaceItemValue "Form", "Memo"
		m_note.ReplaceItemValue "Logo", m_session.currentdatabase.getprofiledocument("CalendarProfile").GetItemValue("DefaultLogo")(0)
	End Sub	
	
	Property Get ItemMapsStr As String
		ItemMapsStr = BaseNoteCopy..ItemMapsStr & ";AltSendTo;AltCopyTo;AltBlindCopyTo;iSendTo;iCopyTo;iBlindCopyTo;$StorageTo;$StorageCc;$StorageBcc;$NameLanguageTags"
	End Property	
	
End Class

Class CalendarCopy As BaseNoteCopy
	Private m_strOriginalPrincipal As String	
	
	Sub new (note As NotesDocument), BaseNoteCopy( note)
		
	End Sub
	
	Private Sub setNewNoteInfo
		BaseNoteCopy..setNewNoteInfo
		m_note.replaceItemValue "Form", "Appointment"		
	'	m_note.replaceItemValue "AppointmentType", "0" - we no longer need to do this here since we let the user choose the type of Appointment they want to create
		m_note.replaceItemValue "CopyInto", "1"
	End Sub
	
	Public Function copyIntoMe( ToCopy As BaseNoteCopy)
		m_strOriginalPrincipal = ToCopy.m_note.GetItemValue("Principal")(0)		
		Call BaseNoteCopy..copyIntoMe( ToCopy )
	End Function
	
	Property Get ItemMapsStr As String
		ItemMapsStr = BaseNoteCopy..ItemMapsStr & ";StartDate;StartDateTime;StartTime;EndDate;EndDateTime" &_
		";EndTime;Resources|RequiredResources;RoomToReserve|Room;AppointmentType;CalendarDateTime;RoomToReserve;OrgConfidential;BookFreeTime;Categories;Location" &_
		";Alarms;$Alarm;$AlarmDescription;$AlarmOffset;$AlarmSound;$AlarmUnit;StartTimeZone;EndTimeZone;tmpShowTZ;tmpHideTimeZone"
	End Property
	
	Private Sub postCopyProcessing( toCopy As BaseNoteCopy)
		'allow the user to make a copy of a meeting and keep it a meeting with orig princ and invitees
		If (toCopy.m_note.getItemValue("Form")(0) = "Appointment") Then
			m_note.replaceItemValue "AppointmentType", toCopy.m_note.getItemValue("AppointmentType")(0) 
		Else
			If Not((toCopy.m_note.getItemValue("Form")(0) = "Task") And (toCopy.m_note.getItemValue("TaskType")(0) = "2")) Then
				BaseNoteCopy..ClearWorkflow
			End If
		End If
	End Sub
	
	Private Function RemoveItemFromArray(vArray As Variant,strItem As String) As Variant
		Dim nIndex As Integer
		nIndex = NAMEFindInList(strItem, vArray)	
		If (nIndex >= 0) Then
			vArray(nIndex) = ""
		End If				
		RemoveItemFromArray = vArray
	End Function
	
End Class

Class TaskCopy As BaseNoteCopy
	Sub new (note As NotesDocument), BaseNoteCopy( note)		
	End Sub
	
	Private Sub setNewNoteInfo
		BaseNoteCopy..setNewNoteInfo
		m_note.replaceItemValue "Form", "Task"
		m_note.replaceItemValue "TaskType","1"
	End Sub
	
	Property Get ItemMapsStr As String
		ItemMapsStr = BaseNoteCopy..ItemMapsStr & ";StartDate;StartDateTime;StartTime;DueDate;DueDateTime;Importance"
	End Property
	
	Private Sub postCopyProcessing( toCopy As BaseNoteCopy)
		'allow the user to make a copy of a group task and keep it a group task.
		If toCopy.m_note.getItemValue("Form")(0) = "Task" Then
			m_note.replaceItemValue "TaskType", toCopy.m_note.getItemValue("TaskType")(0) 
		Else
			BaseNoteCopy..ClearWorkflow
		End If
	End Sub
End Class

Class GroupCalendarCopy As BaseNoteCopy
	Sub new (note As NotesDocument), BaseNoteCopy( note)		
	End Sub
	
	Private Sub setNewNoteInfo 
		m_note.replaceItemValue "Form", "(GroupCalendar)"
	End Sub
	
	Property Get ItemMapsStr As String
		ItemMapsStr = "Members|SendTo;Subject"
	End Property
	
	Private Sub postCopyProcessing(toCopy As BaseNoteCopy)
		Dim NoteToCopy As NotesDocument
		Set noteToCopy = toCopy.m_note	
		m_note.replaceItemValue "Members", Arrayappend( Arrayappend( m_note.getItemValue( "Members"), noteToCopy.getItemValue( "CopyTo")), noteToCopy.getItemValue( "BlindCopyTo"))
		Evaluate |Field Members := @Unique( @Trim( Members));""|, m_note 
	End Sub
	
	Public Sub copyIntoBody( noteToCopy As BaseNoteCopy) 
		'Don't ever copy the body
	End Sub
End Class

















'++LotusScript Development Environment:2:2:NAMEGetComponents:1:8
Sub NAMEGetComponents(sUserName As String,sRetAbbreviatedName As String,sRetDomain As String)
	Dim nameUser As NotesName
	Set nameUser = New NotesName(sUsername) 
	If Instr(sUserName,"@") Then
		sRetAbbreviatedName = Strleft(nameUser.abbreviated,"@")
		sRetDomain = Strright(nameUser.abbreviated,"@")
	Else
		sRetAbbreviatedName = nameUser.abbreviated
		sRetDomain = ""
	End If
End Sub
'++LotusScript Development Environment:2:1:NAMECompare:1:8
Function NAMECompare(sName1 As String, sName2 As String) As Integer
%REM
	Returns true if two names are equal, False otherwise

%END REM
	Dim sCanName1 As String
	Dim sDomainName1 As String
	Dim sCanName2 As String
	Dim sDomainName2 As String
	Dim nLenName1 As Integer
	Dim nLenName2 As Integer
	
	Dim name1 As NotesName
	Dim name2 As NotesName
	
	Call NAMEGetComponents(sName1, sCanName1, sDomainName1)
	Call NAMEGetComponents(sName2, sCanName2, sDomainName2)
	
	Set name1 = New NotesName(sCanName1)
	Set name2 = New NotesName(sCanName2)
	
	' Do a canonical comparison if both names are hierarchical
	If (name1.IsHierarchical) And (name2.IsHierarchical) Then	
		If (Strcompare(sCanName1, sCanName2, 1) = 0) Then
			NAMECompare = True
			Exit Function
		Else
			Exit Function		
		End If
	End If
	
     ' Compare the common names
	If (Strcompare(name1.common, name2.common, 1) = 0) Then
		NAMECompare = True
		Exit Function
	End If
	
	NAMECompare = False
End Function
'++LotusScript Development Environment:2:1:NAMEFindInList:1:8
Function NAMEFindInList(sKeyName As String, vListOfNames As Variant) As Integer
%REM
	Given a name and a list of names return the index position if the user is found, -1 otherwise
%END REM 
	Dim x As Integer
	Dim iNames As Integer
	
	NAMEFindInList = -1
	
	If Isempty(vListOfNames) Then
		Exit Function
	End If
	
	If Isarray(vListOfNames) Then
		iNames = Ubound(vListOfNames)
		For x = 0 To iNames
			If (NAMECompare(sKeyName,Cstr(vListOfNames(x)))) Then
				NAMEFindInList = x
				Exit Function
			End If
		Next
	Else
		If (NAMECompare(sKeyName, Cstr(vListOfNames))) Then
			NameFindInList = 0
		End If		
	End If
End Function
'++LotusScript Development Environment:2:1:NAMECompareWildcards:1:8
Function NAMECompareWildcards(Byval sName As String,sWildcard As String) As Integer
%REM
allowable wildcard formats

*/O
*/OU/O
*/OU/OU/O
*/OU/OU/OU/O
%END REM
	Dim name1 As NotesName
	Dim name2 As NotesName
	Dim nWIldcardUnits As Integer
	Dim nNameUnits As Integer
	Dim nPos As Integer
	
	NAMECompareWildcards = False
	
	If Left$(sWildcard,1) <> "*" Then
		Exit Function          
	End If
	
	Set name1 = New NotesName(sName)
	Set name2 = New NotesName(sWildcard)
	
     ' first, determine how many "/" are in the wildcard and in name
	nWildcardUnits = NAMEGetNumOrgUnits(sWildcard)
	nNameUnits = NAMEGetNumOrgUnits(sName)
	
     ' if there are more "/" in widlcard, the names can't possibly match     
	If (nWildcardUnits > nNameUnits) Then
		Exit Function          
	End If
	
     ' Now that we validated the # of arguments, assume the names will match
     ' We do it this way so that if any particular comparison fails, we set to false and exit
     ' In addition, if nWildcard units = 0, then the wildcard must be "*", so everything matches
	
	NAMECompareWildcards = True
	
	If (nWildcardUnits > 0) Then
      ' First, compare the Organization
		If Not(Strcompare(name1.organization, name2.organization,1) = 0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 1) Then
      ' compare the OU1
		If Not(Strcompare(name1.Orgunit1, name2.orgunit1,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 2) Then
      ' compare the OU2
		If Not(Strcompare(name1.Orgunit2, name2.orgunit2,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 3) Then
      ' compare the OU3
		If Not(Strcompare(name1.Orgunit3, name2.orgunit3,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
	If (nWildcardUnits > 4) Then
      ' compare the OU4
		If Not(Strcompare(name1.Orgunit4, name2.orgunit4,1)=0) Then
			NAMECompareWildcards = False               
			Exit Function                    
		End If
	End If
	
   ' if we made it this far, the name matches the wildcard
End Function
'++LotusScript Development Environment:2:1:NAMEGetNumOrgUnits:1:8
Function NAMEGetNumOrgUnits(sName) As Integer
	Dim nPos As Integer
	Dim nUnits As Integer
	nPos = Instr(sName,"/")
	While (nPos > 0)
		nUnits = nUnits + 1
		sName = Right$(sName,Len(sName)-nPos)
		nPos = Instr(sName,"/")          
	Wend
	NAMEGetNumOrgUnits = nUnits
End Function
'++LotusScript Development Environment:2:1:CSGetMailFileOwner:1:8
Function CSGetMailFileOwner() As String
	Dim session As New notessession
	Dim profile As notesdocument
	Dim strOwner As String
	
	Set profile = session.currentdatabase.getprofiledocument("CalendarProfile")
	
	strOwner = profile.GetItemValue("Owner")(0)
	
	If Len(strOwner) Then
		CSGetMailFileOwner = strOwner
	Else
		CSGetMailFileOwner = session.UserName
	End If
End Function
'++LotusScript Development Environment:2:1:NOTEUserIsCreator:1:8
Function NOTEUserIsCreator(note As NotesDocument) As Integer
	Dim strMailOwner As String
	Dim strFrom As String
	Dim session As New NotesSession
	
	NOTEUserIsCreator = True
	
	' By default, all new documents are creators
	If (note Is Nothing) Then
		Exit Function
	End If
	
	If (note.IsNewNote) Then 
		Exit Function
	End If
	
	strMailOwner = CSGetMailFileOwner()
	If (note.HasItem("Chair")) Then
		strFrom = note.getitemvalue("Chair")(0)
		If note.HasItem("$ICAL_UID") Then
			' we need to check and see if iCal mucked with the Chair item
			Dim icalNotesName As New NotesName(strFrom)
			Dim strICAladdress As String
			Dim iFindChar As Integer, iFindSlash As Integer
			
			strICAladdress = icalNotesName.Canonical
			iFindChar = Instr( 1, strICAladdress, "@")
			iFindSlash = Instr( 1, strICAladdress, "/")
			
			' is this a possible internet address with a slash?
			If iFindChar > 0 And iFindSlash > 0 Then
				If Instr( iFindChar+1, strICAladdress, "@") > 0 Then
					' not internet address, since it has 2 ( or more ) @'s
				Elseif Instr( iFindChar, strICAladdress, ".") >0 Then
					' we assume internet address, since it has a period in the address after the @
					If  Instr( 1, strICAladdress, """")>0 Then
						strICAladdress = icalNotesName.Addr822Phrase	
						If  Instr( Len(strICAladdress), strICAladdress, """")>0 Then
							' rip off leading and trailing quotes
							strICAladdress = Mid(strICAladdress, 2, (Len(strICAladdress)-2))
						End If
						strFrom = strICAladdress
					Else 
						' no double quotes, so just use the Phrasename
						strFrom = icalNotesName.Addr822Phrase	
					End If
				End If
			End If
		End If
	Elseif (note.HasItem("Principal")) Then
		strFrom = note.getitemvalue("Principal")(0)
	Elseif (note.hasItem("From")) Then
		strFrom = note.getitemvalue("From")(0)
	Else
		strFrom = session.UserName
	End If
	
	If Len(strFrom) = 0 Then strFrom = session.UserName
	
	NOTEUserIsCreator = NAMECompare(strMailOwner, strFrom)	
End Function
'++LotusScript Development Environment:2:1:NAMEExistsInList:1:8
Function NAMEExistsInList(sKeyName As String, vLIstOfNames As Variant) As Integer
%REM
	Given a name and a list of names return True if sKeyName exists in vListOfNames
		false if they are not
%END REM 
	NAMEExistsInList = False
	
	NAMEExistsInList = (NAMEFindInList(sKeyName, vListOfNames) >= 0)
End Function
'++LotusScript Development Environment:2:1:NOTECopyIntoNewDocument:1:8
Function NOTECopyIntoNewDocument(Byval iNewType As Integer, Byval iFlags As Integer, note As NotesDocument, strnewform As String) As NotesDocument
	Dim copyInto As BaseNoteCopy
	Dim copyFactory As New CopyFactory
	
	Set copyInto = copyFactory.createNew( iNewType)
	copyInto.copyIntoAsLink = iFlags
	
	copyInto.copyIntoMe copyFactory.createFromExisting( note)
	If Len( strNewForm) >0 Then
		copyInto.document.replaceItemValue "Form", strnewForm
	End If
	Set NOTECopyIntoNewDocument = copyInto.document
End Function
'++LotusScript Development Environment:2:1:YesNoPrompt:1:8
Function YesNoPrompt(sPrompt As String, sTitle As String) As Integer
	Dim nResult As Integer         
	nResult = Messagebox(sPrompt, MB_YESNO + MB_ICONQUESTION, sTitle)
	YesNoPrompt = (nResult = IDYES)
End Function
'++LotusScript Development Environment:2:1:YesNoCancelPrompt:1:8
Function YesNoCancelPrompt(sPrompt As String, sTitle As String) As Integer
	YesNoCancelPrompt = Messagebox(sPrompt, MB_YESNOCANCEL+MB_ICONQUESTION , sTitle)
End Function
'++LotusScript Development Environment:2:1:DisplayWarn:1:8
Function DisplayWarn(sError As String, nPrompt As Integer, sTitle As String) As Integer
	DisplayWarn = Messagebox (sError, nPrompt+MB_ICONEXCLAMATION, sTitle)
End Function
'++LotusScript Development Environment:2:1:CSEventDTItemsModified:1:8
Function CSEventDTItemsModified(vBEObject As Variant) As Integer
%REM
	Determines if either one of the date/time values of
	a cs object were modified
%ENDREM	
	
	If (vBEobject.OriginalEndDate.TimeDifference(vBEObject.CurrentEndDate) <> 0) Then
		CSEventDTItemsModified = True
		Exit Function
	End If
	
	If (vBEobject.OriginalStartDate.TimeDifference(vBEObject.CurrentStartDate) <> 0) Then
		CSEventDTItemsModified = True
		Exit Function
	End If
	
	CSEventDTItemsModified = False
End Function
'++LotusScript Development Environment:2:1:CSEventNeedsReschedule:1:8
Function CSEventNeedsReschedule(vBEObject As Variant) As Integer
	Dim dtCurrentEnd As NotesDateTime
	Dim dtCurrentStart As NotesDateTime
	
	CSEventNeedsReschedule = False
	
	' if the document was never mailed, no need to reschedule it
	If Not(vBEobject.WasMailed) Then
		Exit Function
	End If
	
	Set dtCurrentEnd = vBEObject.CurrentEndDate
	If (vBEObject.OriginalEndDate.TimeDifference(dtCurrentEnd) <> 0) Then
		CSEventNeedsReschedule = True
		Exit Function
	End If
	
		' If there are no invitees, we do not need to reschedule		
	If vBEObject.WasMailed Then
		Set dtCurrentStart = vBEObject.CurrentStartDate
		If (vBEObject.OriginalStartDate.TimeDifference(dtCurrentStart) <> 0) Then
			CSEventNeedsReschedule = True
		End If
	End If
End Function
'++LotusScript Development Environment:2:2:CSDocOpen:1:8
Sub CSDocOpen(vBEObject As Variant, note As NotesDocument, dtCalInstance As NotesDateTime, Byval dOptions As Long)
%REM
	Provides all backend processing for opening a cs document
%ENDREM	
	Dim dInitFlags As Long
	Dim bInitDates As Integer
	
	If Not(dtCalInstance Is Nothing) Then Set vBEObject.CalendarInstance = dtCalInstance
	
	' If we do not have a note, bail now
	If (note Is Nothing) Then Exit Sub
	
	If (dOptions And CS_DOC_WEBUSER) = CS_DOC_WEBUSER Then 
		dInitFlags = 8
		If (dOptions And CS_DOC_FIRSTPASS) = 0 Then dInitFlags = dInitFlags Or 16
	End If
	
	On Error Resume Next	
	Call vBEobject.Init(note, dInitFlags)
	On Error Goto errorroutine
	
	' See if this is a new document
	If (note.IsNewNote) Then
		If Not((note.getitemvalue("WebDateTimeInit")(0)="1")) Then
			Call note.replaceitemvalue("WebDateTimeInit", "1")
			bInitDates = True
		End If
		If (note.getitemvalue(vBEOBject.EndItemName)(0) = "") Then 
			bInitDates = True
		Else
			bInitDates = False
		End If
		
		If (bInitDates = True) Then Call vBEObject.InitDateTimeItems(vBEObject.CalendarInstance)	
		
		If (dOptions And CS_DOC_ALARMS) Then Call vBEObject.SetDefaultAlarm()
	End If
	
	
	Call note.removeitem("tmpOwnerHW")
	Call note.removeitem("tmpNoActionBar")
	
	If (vBEObject.WasMailed) Then
		Call note.ReplaceItemValue("tmpWasMailed", "1")
	End If
	Exit Sub
ErrorRoutine:
	Msgbox "Error opening C&S Document -> " & Error$
	Exit Sub
End Sub
'++LotusScript Development Environment:2:2:CSDocSave:1:8
Sub CSDocSave(vBEObject As Variant, vCallBackObject As Variant, Byval dAction As Long, Byval dOptions As Long, vContinue As Variant)
	Dim note As notesDocument
	Dim vDates As Variant
	Dim strAction As String, strCurrentType As String, strOriginalType As String
	Dim bOwner As Integer, bCreateRepeat As Integer, nChangeWhich As Integer
	Dim iType As Integer
	
	Set note = vBEObject.Document
	bOwner = ((dOptions And CS_DOC_FOROWNER) = CS_DOC_FOROWNER)
	If ((dOptions And CS_DOC_TASK) = CS_DOC_TASK) Then
		iType = 2
	Elseif ((dOptions And CS_DOC_RESOURCE) = CS_DOC_RESOURCE) Then
		iType = 3
	Else
		iType = 1
	End If
	
	strAction=note.getitemvalue("tmpaction")(0)
	
	If Len(strAction) Then dAction = (dAction Or Clng(strAction))
	
	' Call the function that allows outside apps to do some pre-save stuff
	Call CSExtAppDocSave(note, dAction, iType, vContinue)
	
	' If the ext app does not want to continue, bail
	If Not(vContinue) Then Exit Sub
	
	strCurrentType = vBEObject.CurrentType
	strOriginalType = vBEObject.OriginalType
	
	' set the public access flag
	If (iType <> 3) Then
		If (note.GetItemValue("OrgConfidential")(0) = "1") Then
			Call note.removeitem("$PublicAccess")
		Else
			Call note.replaceitemvalue("$PublicAccess","1")
		End If
		
		If (dOptions And CS_DOC_ALARMS) Then
			If (note.HasItem("$Alarm") And Not(vbeobject.InAlarmFolder)) Then
				If Not(note.hasitem("$AlarmTime")) And Not(note.hasitem("$AlarmOffset")) Then
				' The user wants this entry to have an alarm by default				
					Call vbeobject.AddDefaultAlarm()
				End If
			End If
		End If
	End If
	
	' If this is a repeating instance, store off the original start date
	If (vBEObject.Context = CTX_REPEAT_INST) Then Call note.ReplaceitemValue("OriginalStartDate", vBEObject.OriginalStartDate)
	
	If (bOwner Or iType = 3) Then
		If (dOptions And CS_DOC_ISCOUNTER) = 0 Then
			If ((dOptions And CS_DOC_WEBUSER) > 0) Or (iType = 3) Then Call vBEObject.UpdateDateTimeItems()
			
			' Perform actions on calendar entries
			If (iType = 1) Then
				Call CSDocSaveCalendarEntry(vBEObject, bOwner, strCurrentType)
			Elseif (iType = 2) Then
				Call vBEObject.SetDueState
			End If
			
			' If we are rescheduling, update the sequence num
			If (dAction And ACTION_RESCHEDULE) Then Call vBEObject.IncrementSequenceNum()
			Call vBEObject.SetCalendarDateTime()
			Call vBEObject.SetViewIcon()
			
			If (note.HasItem("OrgRepeat") And Not(note.IsResponse)) Then
				If Not(note.HasItem("RepeatDates")) Then
					On Error Goto GenerateRepeatError
					vDates = vBEObject.GenerateRepeatDates()
					Call note.ReplaceItemValue("RepeatDates", vDates)
					bCreateRepeat = True
					On Error Resume Next
				End If
			End If
			
			Call vBEObject.UpdateBusyTimeInfo(note.GetItemValue("BookFreeTime")(0)  <> "1")
			
		' Check to see if we need to mail this thing
			If (dAction And ACTION_SEND) Then Call CSDocSendPrimaryNotice(vBEObject, vCallBackObject, vContinue)
			
			If (vContinue = False) Then 
				Call note.removeitem("RepeatDates")
				Exit Sub
			End If			
			
			If (bCreateRepeat) Then Call vBEObject.CreateRepeatHierarchy()
		End If	
	End If
	
	
	Call vBEObject.MarkTempItems	
	
	Exit Sub
	
GenerateRepeatError:
	If (dOptions And CS_DOC_WEBUSER) = 0 Then
		Dim strtable As New BaseCSStringTable()
		' warn the user that we cannot create this many instances
		Call DisplayWarn(strtable.getstring(ERR_CREATE_REPEAT, Null), 0, strtable.getstring(ERR_TITLE,Null))	
		vContinue = False
		Call note.removeitem("RepeatDates")		
	End If
	Exit Sub
End Sub	
'++LotusScript Development Environment:2:2:CSDocSaveCalendarEntry:1:8
Sub CSDocSaveCalendarEntry(vBEObject As Variant, bOwner As Integer, strCurrentType As String)
	Dim note As notesdocument
	Dim item As notesitem
	Dim nYearly As Integer
	
	Set note = vBEObject.Document
	
	If (strCurrentType = "1" And (note.IsNewNote = True)) Then
		' See if this should automatically repeat
		If Not(note.hasitem("OrgRepeat")) And Not(note.hasitem("tmpDoNotRepeat")) Then
			nYearly = CSProfileGetAutoAnnivRepeat()
			If (nYearly > 0) Then
				Set item = note.getfirstitem("StartDate")
				Call item.copyitemtodocument(note, "RepeatStartDate")
				Call note.replaceitemvalue("OrgRepeat","1")
				Call note.replaceitemvalue("RepeatHow", "F")
				Call note.replaceitemvalue("RepeatFor", nYearly)
				Call note.replaceitemvalue("RepeatForUnit","Y")
				Call note.replaceitemvalue("RepeatUnit","Y")
				Call note.replaceitemvalue("RepeatInterval", "1")
				Call note.replaceitemvalue("RepeatWeekends", "D")
			End If
		End If
	End If
End Sub
'++LotusScript Development Environment:2:2:CSDocSendPrimaryNotice:1:8
Sub CSDocSendPrimaryNotice(vBEObject As Variant, vCallBackObject As Variant, vContinue As Variant)
	Dim fSendOptions As Integer
	Dim bSendNow As Integer
	Dim bSendUpdate As Integer
	
	On Error Resume Next
	
	' init flags for QuerySave
	Err=0
	vCallBackObject.m_roomsError = False
	
	If Not(vBEObject.IsWorkflowEnabled) Then Exit Sub
	
	If vCallBackObject.IsOption(CS_DOC_WEBUSER) Then
		bSendNow = True
	Else
		bSendNow = Cint(Not(vCallBackObject.m_bSendComments))
	End If
	
	' invite Rooms
	fSendOptions = vBEObject.PrimarySendOptions
	If (fSendOptions And 2) Or (fSendOptions And 4) Or (fSendOptions And 8) Then
		On Error Goto RRError
		Call vBEObject.InviteRooms()
		On Error Resume Next
		
		' send updated Info if this isn't a new note and this isn't a draft ( posteddate or busypriority )
		If Not( vCallBackObject.m_note.IsNewNote() ) And _
		( ( vCallBackObject.m_note.HasItem("PostedDate") Or ( vCallBackObject.m_note.HasItem("$BusyPriority")) ) ) Then
			bSendUpdate = True
			If vCallBackObject.m_wasRescheduled Then 
				bSendUpdate = False
			End If			
'			If vCallBackObject.m_note.HasItem("tmpWasRescheduled") Then
'				If vCallBackObject.m_note.GetItemValue("tmpWasRescheduled")(0) = True Then
'					bSendUpdate = False
'				End If
'			Else
'				bSendUpdate = True
'			End If
			If bSendUpdate Then
				Call vBEObject.ActionHandler(ORS_MSGTYPE_UPDATEINFO, Cint(bSendNow), Cint(vCallBackObject.FieldsChanged))
				Call vCallBackObject.AddToNotesDocumentArray()
			End If
		End If
	End If
	
	' sametime support	
	' If ( (fSendOptions And 2) Or (fSendOptions And 4) ) Then Call vBEObject.InviteRooms()
	
	If (fSendOptions And 1) Then
	    ' first, prepare the backend document for sending
		Err = 0
		' Morph the cal entry into a notice
		Call vBEObject.PreSendPrimaryRequest()
		
		' obsolete
	'	' sametime support
	'	Dim rtItem As NotesRichTextItem
	'	Dim temp As Variant
	'	
	'	
	'	If (vBEObject.document.OnlinePlace(0) <> "") Then
	'		' Remove the whiteboard attachments if the user did not specify them to be sent
	'		' ... in the invitation
	'		If (vBEObject.document.SendAttachments(0) <> "1") Then			
	'			Set rtItem = vBEObject.document.GetFirstItem( "WhiteBoardContent")
	'			If ( rtItem.Type = RICHTEXT ) Then					
	'				temp = rtItem.embeddedobjects				
	'				'Make sure there are attachments
	'				If Not Isempty (temp) Then
	'					Forall o In rtitem.EmbeddedObjects
	'						Call o.Remove
	'					End Forall
	'				End If
	'			End If
	'		End If
	'	End If
		
		' invoke the (LS) callback object - mail the initial invitation
		Call vCallBackObject.SendPrimaryRequest()
		' Revert doc back to appt.
		Call vBEObject.PostSendPrimaryRequest(Err <> 0)
		
		'we need to instruct the mailer not to attemplt to route the on-disk calendar entry			
		Call vBEObject.document.ReplaceItemValue("MailOptions","0")	
	End If
	
	If (Err <> 0) Then vContinue = False
	Exit Sub
	
	
RRError:
	Call DisplayWarn(  |Unable to send mail to Room or Resource; 
no match(s) found in Name & Address Book(s).|, 0, "Rooms and Resources" )
	
	Dim vNewList, vCurrentList, vBadList As Variant
	
	' remove R&R
	If ( vBEObject.Document.HasItem("Room")) Then
		vCurrentList = vBEObject.Document.GetItemValue("Room")
		vBadList = vBEObject.Document.GetItemValue("RoomToReserve")
		
		' remove anything that the user just added...
		vNewList = Fulltrim(Arrayreplace(Fulltrim(vCurrentList), Fulltrim(vBadList), "")) 
		Call vBEObject.Document.replaceitemvalue("Room", vNewList)
	End If
	
	vNewList = Null
	vCurrentList = Null
	vBadList = Null
	
	If ( vBEObject.Document.HasItem("RequiredResources")) Then
		vCurrentList = vBEObject.Document.GetItemValue("RequiredResources")
		vBadList = vBEObject.Document.GetItemValue("Resources")
		
		' remove anything that the user just added...
		vNewList = Fulltrim(Arrayreplace(Fulltrim(vCurrentList), Fulltrim(vBadList), "")) 
		Call vBEObject.Document.replaceitemvalue("RequiredResources", vNewList)
	End If
	
	vBEObject.Document.RemoveItem("RoomToReserve")
	vBEObject.Document.RemoveItem("Resources")
	
	' send flag back to QuerySave
	vCallBackObject.m_roomsError = True		
	
	If (Err <> 0) Then 
		vContinue = False
		If (IsWebBeingSaved) Then
			Dim filepath As String
			Dim pos As Integer
			filepath = db.FilePath
			pos = Instr(filepath, "\")
			Do Until pos = 0
				Mid$(filepath, pos, 1) = "/"
				pos = Instr(filepath, "\")
			Loop
			Print "[/" & filepath & "/rrerror]"
			Exit Sub
		End If
	End If
End Sub				
'++LotusScript Development Environment:2:2:CSDocUpdatePersonalCategories:1:8
Sub CSDocUpdatePersonalCategories(note As NotesDocument, profile As NotesDocument)
	Dim vCategories As Variant
	Dim vResult As Variant
	Dim nentries As Integer		
	Dim strSelectedCategory As String, strCoreCategories As String
	
	If (note Is Nothing) Or (profile Is Nothing) Then Exit Sub
	
	' See if we need to update categories		
	strSelectedCategory = note.GetItemValue("Categories")(0)
	
	If Len(strSelectedCategory) = 0 Then Exit Sub
	
	strCoreCategories = "HVPNCTPC"
	
	If Len(strSelectedCategory) <= 2 Then
		If Instr(strCoreCategories,strSelectedCategory) Then Exit Sub
	End If
	
	vCategories = profile.GetItemValue("UserCategories")		
	
	On Error Resume Next
	
	vResult = Arraygetindex(vCategories, strSelectedCategory)
	
	If Isnull(vResult) = True Then
		nEntries = Ubound(vCategories) + 1
		Redim Preserve vCategories(nEntries)
		vCategories(nEntries) = strSelectedCategory
		Call profile.replaceitemvalue("UserCategories", vCategories)
		Call profile.save(True, False)
	End If
End Sub	
'++LotusScript Development Environment:2:2:CSExtAppDocSave:1:8
Sub CSExtAppDocSave(note As notesdocument, Byval daction As Long, bIsTask As Integer, vContinue As Variant)
	
End Sub
'++LotusScript Development Environment:2:2:wInstantiateObjectVariables:1:8
Sub wInstantiateObjectVariables
	Set session = New NotesSession
	Set db = session.CurrentDatabase
	Set note = session.DocumentContext
	Set agentlog = New noteslog("Agent log")
	Call agentlog.openagentlog
	
	'Setup intial Web State
	IsWebBeingSaved  = False
End Sub
'++LotusScript Development Environment:2:2:wMessagePageHeader:1:8
Sub wMessagePageHeader
     'Create the action bar
	Evaluate("@ReplaceSubstring(""" + PathAndName$ + """;"" "";""+"")")
	Print |<TABLE BORDER CELLSPACING=2 CELLPADDING=2>| 
	Print |<TR VALIGN=middle BGCOLOR="C0C0C0">| 
	Print |<TD><A HREF="| & PathAndName$ & |($InBox)"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn110.gif"> In Box</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |($Calendar)?OpenView&Grid=| & profile.wCalGridType(0) & |"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn133.gif"> Calendar</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |($Meetings)"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn126.gif"> Meetings</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |($ToDo)"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn127.gif"> To Do</A></TD>| 
	Print |<TD><A HREF="| & PathAndName$ & |"><IMG BORDER=0 WIDTH=21 HEIGHT=21 SRC="/icons/actn120.gif"> All Views</A></TD>| 
	Print |</TR></TABLE><HR>|
End Sub
'++LotusScript Development Environment:2:2:CopyProfileValues:1:8
Sub CopyProfileValues(noteSrc As NotesDocument, noteDest As NotesDocument)
	Dim x As Integer
	Dim item As NotesItem
	Dim item2 As NotesITem
	
	
	noteDest.Owner = noteSrc.Owner(0)
	Call agentlog.logaction("owner is "+notesrc.owner(0))
	noteDest.DefaultDuration = noteSrc.DefaultDuration(0)
	noteDest.AutoAnniversaryRepeat = noteSrc.AutoAnniversaryRepeat(0)
	
	If (noteSrc.HasItem("AutoRemoveFromInbox")) Then 
		noteDest.AutoRemoveFromInbox = noteSrc.AutoRemoveFromInbox(0)
	Else
		noteDest.AutoRemoveFromInbox = "0"
	End If
	If (noteSrc.hasitem("FormatReplies")) Then
		noteDest.FormatReplies=noteSrc.FormatReplies(0)
	End If
	If(noteSrc.hasitem("OffsetChar")) Then
		noteDest.OffSetchar=noteSrc.Offsetchar(0)
	End If
	If (noteSrc.HasItem("ExcludeFromAll")) Then 
		noteDest.ExcludeFromAll = noteSrc.ExcludeFromAll(0)
	End If
	If (noteSrc.HasItem("ExcludeFromSent")) Then
		noteDest.ExcludeFromSent=noteSrc.ExcludeFromSent(0)
	End If
	If (noteSrc.Hasitem("ConflictEvent")) Then
		noteDest.ConflictEvent = noteSrc.ConflictEvent(0)
	End If
	If (noteSrc.Hasitem("ConflictMeeting")) Then
		noteDest.ConflictMeeting = noteSrc.ConflictMeeting(0)
	End If
	If (noteSrc.Hasitem("ConflictAnniversary")) Then
		noteDest.ConflictAnniversary = noteSrc.ConflictAnniversary(0)
	End If
	
	If (noteSrc.Hasitem("TaskFollow")) Then
		noteDest.TaskFollow = noteSrc.TaskFollow(0)
	End If
	If (noteSrc.hasitem("AutoProcessType")) Then
		noteDest.AutoProcessType=noteSrc.AutoProcessType(0)
		If (noteSrc.getitemvalue("AutoProcessType")(0)="2") Then
			'pull autoprocessuserlist
			Set item = noteSrc.getfirstitem("AutoProcessUserList")
			Call noteDest.removeitem("AutoProcessUserList")
			Call item.copyitemtodocument(noteDest, "AutoProcessUserList")
		End If
		If (noteSrc.getitemvalue("AutoProcessType")(0)="1") Then
			'pull forward
			Set item = noteSrc.getfirstitem("AutoProcessForwardTo")
			Call noteDest.removeitem("AutoProcessForwardTo")
			Call item.copyitemtodocument(noteDest, "AutoProcessForwardTo")
		End If
	End If
	
	If (noteSrc.hasitem("PreventRepliesFromInbox")) Then
		noteDest.PreventRepliesFromInbox=noteSrc.PreventRepliesFromInbox(0)
	End If
	
	If (noteSrc.hasitem("AutoRemoveFromInbox")) Then
		noteDest.AutoRemoveFromInbox=noteSrc.AutoRemoveFromInbox(0)
	End If
	
	If (noteSrc.hasitem("UserCategories")) Then
		noteDest.UserCategories=noteSrc.UserCategories
	End If
	
	If (noteSrc.hasitem("NABCategories")) Then
		noteDest.NABCategories=noteSrc.NABCategories
	End If
	
	If (noteSrc.hasitem("EnableSignature")) Then
		noteDest.EnableSignature = noteSrc.EnableSignature(0)
	End If
	
	If (noteSrc.hasitem("Signature_1")) Then
		Dim itemSrc As notesitem
		Set itemSrc = noteSrc.getFirstItem("Signature_1")
		If (itemSrc.type = RICHTEXT) Then
			noteDest.Signature_1 = itemSrc.text
			If Not(itemSrc.text = "") Then noteDest.SignatureOption = "1"
		Else 
			Dim rtiDest As notesrichtextitem
			noteDest.removeitem("Signature_1") 
			Set rtiDest = noteDest.createRichTextItem("Signature_1")
			rtiDest.appendText( itemSrc.text )
		End If
	End If
	
	Set item = noteSrc.GetFirstItem("AllowBusyAccess")
	Call noteDest.RemoveItem("AllowBusyAccess")
	Set item2 = item.CopyItemToDocument(noteDest, "AllowBusyAccess")
	If Len(item2.text) Then 
		If Not(item2.Contains(noteSrc.GetItemValue("Owner")(0))) Then 
			Call item2.AppendToTextList(noteSrc.GetItemValue("Owner")(0))
		End If
	End If
	
	If(noteSrc.hasitem("ReadMail")) Then
		Set item = noteSrc.getfirstitem("ReadMail")
		Call noteDest.removeitem("ReadMail")
		Call item.copyitemtodocument(noteDest, "ReadMail")
	End If
	
	If (noteSrc.hasitem("WriteMail")) Then
		Set item = noteSrc.getfirstitem("WriteMail")
		Call noteDest.removeitem("WriteMail")
		Call item.copyitemtodocument(noteDest, "WriteMail")
	End If
	If (noteSrc.hasitem("EditMail")) Then
		Set item = noteSrc.getfirstitem("EditMail")
		Call noteDest.removeitem("EditMail")
		Call item.copyitemtodocument(noteDest, "EditMail")
	End If
	If (noteSrc.hasitem("DeleteMail")) Then
		Set item = noteSrc.getfirstitem("DeleteMail")
		Call noteDest.removeitem("DeleteMail")
		Call item.copyitemtodocument(noteDest, "DeleteMail")
	End If
	If (noteSrc.hasitem("PublicRead")) Then
		noteDest.PublicRead=noteSrc.PublicRead(0)
		Set item = noteSrc.getfirstitem("ReadCalendar")
		Call noteDest.removeitem("ReadCalendar")
		Call item.copyitemtodocument(noteDest, "ReadCalendar")
	End If
	If (noteSrc.hasitem("PublicWrite")) Then
		noteDest.PublicWrite=noteSrc.PublicWrite(0)
		Set item = noteSrc.getfirstitem("WriteCalendar")
		Call noteDest.removeitem("WriteCalendar")
		Call item.copyitemtodocument(noteDest, "WriteCalendar")
	End If
	
	noteDest.Sunday = noteSrc.sunday(0)
	noteDest.Monday = noteSrc.monday(0)
	noteDest.tuesday = noteSrc.Tuesday(0)
	noteDest.Wednesday = noteSrc.Wednesday(0)
	noteDest.Thursday = noteSrc.Thursday(0)
	noteDest.Friday = noteSrc.Friday(0)
	noteDest.Saturday = noteSrc.Saturday(0)
	
	For x = 1 To 7
		Set item = noteSrc.GetFirstItem("$Times" & x)
		If Not(item Is Nothing) Then 
			Call noteDest.RemoveItem(item.name)
			Call item.copyitemtodocument(noteDest,"")
		End If               
	Next
	
	Set item = noteSrc.GetFirstItem("$AvailableDays")
	Call noteDest.RemoveItem("$AvailableDays")	
	If Not(item Is Nothing) Then Call item.copyitemtodocument(noteDest, "")
	
End Sub
'++LotusScript Development Environment:2:2:SetInternationalFormatHelpers:1:8
Sub SetInternationalFormatHelpers( note As NotesDocument)
	
	Const DayString = "DD"
	Const MonthString = "MM"
	Const YearString = "YY"
	Const HourString = "HH"
	Const MinuteString = "MM"
	
	Dim s As New NotesSession
	Dim intl As NotesInternational
	
	Set intl = s.International
	
     ' do the date format helper
	
	Dim dHelp1 As String
	Dim dHelp2 As String
	Dim dHelp3 As String
	Dim tHelp1 As String
	Dim tHelp2 As String
	
	If intl.isDateDMY Then
		dHelp1 = DayString
		dHelp2 = MonthString
		dHelp3 = YearString
	Elseif intl.isDateMDY Then
		dHelp1 = MonthString
		dHelp2 = DayString
		dhelp3 =  YearString
	Else
		dHelp1 = YearString
		dHelp2 = MonthString
		dHelp3 = DayString
	End If
	
	note.DateFormatHelper = dHelp1 + intl.DateSep + dHelp2 + intl.DateSep + dhelp3
	note.DateFormatHelper2 = dHelp1 + intl.DateSep + dHelp2 + intl.DateSep + dhelp3
	
     ' do the time format helper
	tHelp1 = HourString + intl.TimeSep + MinuteString
	
	If Not intl.isTime24Hour Then
		tHelp2 = " " + intl.PMString           
	End If
	
	note.TimeFormatHelper = tHelp1 + tHelp2
	note.TimeFormatHelper2 = tHelp1 + tHelp2
	note.DurationFormatHelper = tHelp1
	note.DurationFormatHelper2 = tHelp1
	
End Sub
'++LotusScript Development Environment:2:2:wMarkTempFields:1:8
Sub wMarkTempFields(doc As NotesDocument)
	Dim itemlist As Variant
'Mark all temporary and compute for display fields such that they will not be saved to disk     
	On Error Resume Next
	itemlist = doc.Items
	Forall n In itemlist
		If Lcase(Left(n.Name, 3)) = "tmp" Or Lcase(Left(n.Name, 4)) = "disp" Then n.SaveToDisk = False
	End Forall     
	
	
     'remove web CGI variable so that they will get updated on the next doc read
	Call doc.RemoveItem("Path_Info")
	Call doc.RemoveItem("Query_String")
	
     'if the mail option fields are all default values, remove them
	If (doc.Importance(0) = "2" And doc.DeliveryPriority(0) = "N" And doc.DeliveryReport(0) = "B" And _
	doc.Form(0) <> "Task") Then
		Call doc.RemoveItem("Importance")
		Call doc.RemoveItem("DeliveryPriority")
		Call doc.RemoveItem("DeliveryReport")
	End If
End Sub
'++LotusScript Development Environment:2:2:wCreateDefaultCalendarProfile:1:8
Sub wCreateDefaultCalendarProfile
%REM
 *This routine creates a calendar profile document
  containg default values for required fields
%END REM
	Dim iwaNote As NotesDocument
	On Error Goto ErrorRoutine
	'the global variable "profile" is a profile document already
	'we need to add the fields to it
	profile.Form = "CalendarProfile"
	Call profile.ReplaceItemValue("Owner",session.effectiveusername)
	Call profile.ComputeWithForm(False, False)	
	profile.wDefaultMailOpt = "2"
	profile.wCalGridType = "3"	
	
	' ** iNotesWebAccess **
	' set the default CalEntryType to Appointment if this
	' mail file inherits from the iNotesXX.ntf template
	Set iwaNote = db.GetDocumentByID( "FFFF0010" )
	If Not (iwaNote Is Nothing) Then
		If (True = iwaNote.HasItem("$WebHybridDb")) Then
			Call profile.ReplaceItemValue( "CalEntryType", "0" )
		End If
		Set iwaNote = Nothing
	End If
	
	Call profile.Save(True,True,True)
	Exit Sub
ErrorRoutine:
	Messagebox(Cstr(Err)+":  "+Error+" wCreateDefaultCalendarProfile")
End Sub
'++LotusScript Development Environment:2:1:wGetCalendarProfile:1:8
Function wGetCalendarProfile As Integer
	On Error Goto ErrorRoutine
	wGetCalendarProfile=True
	Set profile = db.GetProfileDocument("CalendarProfile")
	If (profile.IsNewNote) Or  (Len(profile.getitemvalue("Owner")(0)) = 0) Then wCreateDefaultCalendarProfile	
	If profile.getitemvalue("Owner")(0) = "" Then wGetCalendarProfile=False
	Owner = profile.getitemvalue("Owner")(0)
	Exit Function
ErrorRoutine:
	Messagebox(Cstr(Err)+":  "+Error+" wGetCalendarProfile")
End Function
'++LotusScript Development Environment:2:2:CSDocSaveRepeatingEntry:1:8
Sub CSDocSaveRepeatingEntry(vBEobject As Variant, nUpdateInfoOverWrite As Integer)
	Dim v As Variant
	Dim nContext As Integer, nChangeWhich As Integer, versionNumber As Integer
	
	nContext = vBEobject.Context
	v = Evaluate( |@Version| )
	versionNumber = Format(v(0), "Fixed")
	
	If (nContext = CTX_REPEAT_INST Or nContext = CTX_REPEAT_MSG) Then
		nChangeWhich = vBEObject.RepeatModify
		If ( versionNumber > 177 ) Then
			If nChangeWhich <> REPEAT_CANCEL Then Call vBEObject.ApplyRepeatChanges(nChangeWhich, Cint(nUpdateInfoOverWrite))
		Else
			If nChangeWhich <> REPEAT_CANCEL Then Call vBEObject.ApplyRepeatChanges(nChangeWhich)		
		End If
	End If
End Sub
'++LotusScript Development Environment:2:1:CSGetMainEventObject:1:8
Function CSGetMainEventObject(vBEObject As Variant) As Variant
	Select Case vBEObject.Context
	Case CTX_REPEAT_MSG
		Set CSGetMainEventObject = vbeobject.RepeatInstanceEvent
	Case CTX_REPEAT_NONE
		If (vBEObject.Document.IsResponse) Then
			Set CSGetMainEventObject = vbeobject.ParentEvent
		Else
			Set CSGetMainEventObject = vbeobject	
		End If
	Case Else
		Set CSGetMainEventObject = vBEObject		
	End Select
End Function
'++LotusScript Development Environment:2:1:CSNoteGetType:1:8
Function CSNoteGetType(note As notesdocument) As Integer
	Dim strForm As String
	
	strForm = note.getitemvalue("Form")(0)
	
	If Instr(1, strForm, "task", 1) > 0 Then
		CSNoteGetType = 2
	Elseif Instr(1, strForm, "reservation", 1) > 0 Then
		CSNoteGetType = 3
	Else
		CSNoteGetType = 1
	End If
End Function
'++LotusScript Development Environment:2:1:CSProfileGetAutoAnnivRepeat:1:8
Function CSProfileGetAutoAnnivRepeat() As Integer
	Dim session As New notessession
	Dim profile As notesdocument
	Dim vValue As Variant
	
	Set profile = session.currentdatabase.getprofiledocument("CalendarProfile")
	
	vValue = profile.getitemvalue("AutoAnniversaryRepeat")(0)
	
	If Isnumeric(vValue) Then
		CSProfileGetAutoAnnivRepeat = vValue
	Else
		CSProfileGetAutoAnnivRepeat = 0
	End If
End Function
'++LotusScript Development Environment:2:1:CSEventPerformAction:1:8
Function CSEventPerformAction(vBEObject As Variant, Byval strAction As String, Byval bSendNow As Integer, vArgs As Variant) As Integer
	Dim note As notesdocument
	Dim bKeepPosted As Integer, fCancelFlags As Integer
	
	Set note = vBEObject.Document
	
	Select Case strAction
	Case ORS_MSGTYPE_ACCEPT	
		If (note.GetItemValue("tmpPencilIn")(0) = "1") Then strAction = ORS_MSGTYPE_PENCILIN
		
	Case ORS_MSGTYPE_CANCEL
		      ' See if the user wants to delete the event; if they do, we must mark our owning document
		      ' for deletion and let the backend remove the responses; otherwise, we end up removing the document
		      ' from underneath ourselves
		fCancelFlags = Cint(vArgs)
		If (note.GetItemValue("tmpDeleteEntry")(0) = "1" And Not((fCancelFlags And REMOVE_DELETED) = REMOVE_DELETED)) Then
			fCancelFlags = fCancelFlags Or REMOVE_RESPONSES
			vArgs = Cint(fCancelFlags)
		End If
		
	Case ORS_MSGTYPE_DELEGATING, ORS_MSGTYPE_REJECT
		bKeepPosted = (note.GetItemValue("tmpKeepPosted")(0) = "1")
		vArgs = Cint(bKeepPosted)
	End Select
	
	CSEventPerformAction = CSEventPerformActionGuts(vBEObject, strAction, bSendNow, vArgs)
End Function
'++LotusScript Development Environment:2:1:CSEventPerformActionGuts:1:8
Function CSEventPerformActionGuts(vBEObject As Variant, strAction As String, bSendNow As Integer, vArgs As Variant) As Integer
	If Isarray(vArgs) = False Then
		If Datatype(vArgs) = 8 Then
			Call vbeobject.ActionHandler(strAction, Cint(bSendNow), Cstr(vArgs))
		Elseif Isnumeric(vArgs) Then
			Call vbeobject.ActionHandler(strAction, Cint(bSendNow), Cint(vArgs))
		End If
	Else
		Call vbeobject.ActionHandler(strAction, Cint(bSendNow), vArgs)
	End If
End Function
'++LotusScript Development Environment:2:2:CSDocScanForUpdates:1:8
Sub CSDocScanForUpdates ( beobject As Variant, vCallBackObj As Variant)
	Dim po As Variant ' The main meeting invitation document object
	Dim riNotice As NotesCSUpdateInstance
	Dim riConfirmation As NotesCSUpdateInstance
	Dim bReadingCurrent As Integer, fUpdateMain As Integer
	Dim noteInEditor As NotesDocument      ' the document currently in the editor
	Dim noteMain As NotesDocument     ' The main meeting invitation document
	Dim strCurrentType As String
	
	Set noteInEditor = beobject.Document
	
		' If this is a main repeating document, we can leave now
	If (beobject.Context = CTX_REPEAT_MAIN) Then Exit Sub
	
	Set po = CSGetMainEventObject(beobject)
	
	strCurrentType = noteInEditor.GetItemValue("NoticeType")(0)
	
		' If there is no primary object, bail
	If (po Is Nothing) Then 
		If (strCurrentType <> "I" And strCurrentType <> "L") Then
			Call noteInEditor.replaceitemvalue("tmpDoNotProcess", "1") 
			Exit Sub
		Else
			Exit Sub
		End If
	Else
		Set noteMain = po.Document
		' If there is no main document then bail
		If (noteMain Is Nothing) Then 
			Call noteInEditor.replaceitemvalue("tmpDoNotProcess", "1") 
			Exit Sub
		End If
		
	End If
	
	Call beobject.GetMostRecentEventNotices()
	Set riNotice = beobject.UpdateNotice
	Set riConfirmation = beobject.ConfirmNotice  
	
	If Not(riNotice Is Nothing) Then
		bReadingCurrent = (Lcase(noteInEditor.noteid) = Lcase(riNotice.noteid))   
		Select Case riNotice.NoticeType
		Case ORS_MSGTYPE_RESCHEDULE
			If rinotice.sequencenum > po.Sequencenum Then
				If Not(bReadingCurrent) Then
     					' The user is not reading the most up-to-date notice; inform them of the change
					If (vCallBackObj.DoMessageBox(RESC_MSG,MB_YESNO + MB_ICONQUESTION, UPD_TITLE) = IDYES) Then
						vCallBackObj.ActionInProgress = ACTION_OPENRESCHEDULE
					Else
						Call noteInEditor.ReplaceItemValue("tmpDoNotProcess", "1")
					End If
				End If
			Else
				If Strcompare(noteMain.noteid, noteInEditor.noteid, 1) <> 0 Then Call noteInEditor.ReplaceItemValue("tmpDoNotProcess", "1")
			End If
		Case ORS_MSGTYPE_CANCEL
    			' It doesn't matter if the user is reading the most up-to-date notice;     
			If (noteMain.GetItemValue("NoticeType")(0) = ORS_MSGTYPE_ACCEPT) Then
     				' The main invitation has been accepted; we need to cancel it
				Call vCallBackObj.DoMessageBox(CANCEL_UPD, 0, UPD_TITLE)
				Call po.DeCommitEvent(ORS_MSGTYPE_CANCEL)
				fUpdateMain = True		
			Else
     				' The main invitation has not been accepted; however, if the user is not reading the most up-to-date notice, inform them this has been cancelled
				If Not(bReadingCurrent) Then 
					Call vCallBackObj.DoMessageBox (CANCEL_NOACTN, 0, UPD_TITLE)
				End If
			End If
    			' We always set this item for cancels; user's do not need to take any action on cancels    
			Call noteInEditor.ReplaceItemValue("tmpDoNotProcess", "1")
		Case ORS_MSGTYPE_STATUSREQUIRED
			If (noteMain.GetItemValue("NoticeType")(0) <> ORS_MSGTYPE_ACCEPT) Then
					' If they are not reading the most uptodate notice, inform them
				Call vCallBackObj.DoMessageBox (STATUS_REQUIRED,0,STATUS_TITLE)
					' accept the main invitation
				Call po.ActionHandler(ORS_MSGTYPE_ACCEPT, False, 0)
				fUpdateMain = True		
			End If
			Call noteInEditor.Replaceitemvalue("tmpDoNotProcess","1")
		Case ORS_MSGTYPE_STATUSREMOVED
			If (noteMain.GetItemValue("NoticeType")(0) = ORS_MSGTYPE_ACCEPT) Then
					' If they are not reading the most uptodate notice, inform them
				Call vCallBackObj.DoMessageBox (STATUS_REMOVED, 0, STATUS_TITLE)
					' accept the main invitation
				Call po.DeCommitEvent("5")
				fUpdateMain = True		
			End If
			Call noteInEditor.Replaceitemvalue("tmpDoNotProcess","1")
			
		Case ORS_MSGTYPE_COUNTERREJECT
		End Select
		If (fUpdateMain) Then
			If (vCallBackObj.CheckForRepeatChanges(False) = False) Then Exit Sub
			Call CSDocSaveRepeatingEntry(beObject, Cint(0))
			Call noteMain.Save(True, True, True)	
		End If
	End If
End Sub
'++LotusScript Development Environment:2:1:wReturnReceipt:1:8
Function wReturnReceipt( note As notesdocument )
	Dim receipt As notesdocument
	
	If (note.HasItem("DeliveredDate")) And (note.getitemvalue("ReturnReceipt")(0) = "1") Then		
		If Not NameCompare(session.EffectiveUserName,note.GetItemValue("From")(0)) Then			
			Set receipt = New NotesDocument (db)		
			Call receipt.replaceitemvalue("Form", "Return Receipt")
			If wGetCalendarProfile() Then	
				Call receipt.replaceitemvalue("IntendedRecipient", Owner)
			Else
				Call receipt.replaceitemvalue("IntendedRecipient", session.CommonUserName)
			End If
			Dim dtNow As New NotesDateTime ("")
			Call dtNow.setNow()
			Call receipt.replaceitemvalue("DeliveryDate", dtNow)
			Call receipt.replaceitemvalue("Path_Info", note.getitemvalue("RouteServers")(0))
			Call receipt.replaceitemvalue("Subject",note.getitemvalue("Subject")(0))		
			Call receipt.MakeResponse(note)		
			Call receipt.send (False, note.getitemvalue("From")(0))		
			Call note.replaceitemvalue("ReturnReceipt", "0")
			Call note.Save (True, False)		
		End If	
	End If
End Function
'++LotusScript Development Environment:2:1:IsDocAltNameCandidate:1:8
Function IsDocAltNameCandidate(note As notesdocument) As Integer
	If note.GetItemValue("ClientType")(0) <> "Web" Then
		If note.GetItemValue("NamePreference")(0) = "1" Then  'user wants to view alt names
			IsDocAltNameCandidate = True		
			If (note.HasItem("PostedDate"))Then  'this is a routed note, parse the language tags
				If note.HasItem("$NameLanguageTags") Then
					Dim tmp_vNameLanguageTags As Variant
					
					tmp_vNameLanguageTags = note.GetItemValue("$NameLanguageTags")
					
					Forall tmpLanguages In note.GetItemValue("LanguagePreference")
						If Isnull(Arraygetindex(tmpLanguages,tmp_vNameLanguageTags)) Then
							IsDocAltNameCandidate = False 'a language tag was encoutered that the user doesn't understand
							Exit Function
						End If
					End Forall
				End If
			End If
		End If
	End If
End Function
'++LotusScript Development Environment:2:2:PopulateSendTo:1:8
Sub PopulateSendTo()
	Dim query_string As String
	Dim strUNIDS As String, strUNID As String
	Dim itemSendTo As notesitem
	Dim strRecipient As String
	Dim noteReferred As notesdocument
	
	query_string = note.getitemvalue("Query_String")(0)
	Set itemSendTo = note.getFirstItem("SendTo")
	
	strUNIDS = Strright( query_string, "&To=")
	strUNIDS = Strleft( strUNIDS, "&ReturnView=")
	
	While Not(strUNIDS = "")	
		
		strUNID = Strright(strUNIDS, ";")
		strUNIDS = Strright(strUNIDS, ";")
		
		If strUNID="" Then Exit Sub
		
		strRecipient = ""
		Set noteReferred = db.getdocumentbyUNID(strUNID)
		If Not(noteReferred Is Nothing) Then
			If (noteReferred.getitemvalue("Form")(0) = "Person") Then
				strRecipient = noteReferred.getitemvalue("MailAddress")(0)
				If (strRecipient = "") Then
					Dim tmpFirst As String
					tmpFirst = noteReferred.getitemvalue("FirstName")(0)
					strRecipient = noteReferred.getitemvalue("LastName")(0)
					If (strRecipient = "") Then
						strRecipient = noteReferred.getitemvalue("CompanyName")(0)
					Elseif Not(tmpFirst = "") Then
						strRecipient = tmpFirst & " " & strRecipient
					End If
				End If
			Else
				strRecipient = noteReferred.getitemvalue("ListName")(0)
			End If
		End If
		
		If Not(strRecipient = "") Then Call itemSendTo.appendToTextList( strRecipient )
	Wend 
	
End Sub
'++LotusScript Development Environment:2:2:NABResolveName:1:8
Sub NABResolveName( Byval strName As String, listResolved List As String, view As notesview, listGroups List As String)
	Dim ve As notesviewentry
	Dim colVals As Variant
	Dim iCount As Integer
	
	If strName = "" Then Exit Sub
	
	'Try to resolve name locally
	Set ve = view.getEntryByKey(strName, True)
	If (ve Is Nothing) Then 
		listResolved( strName ) = strName
		Exit Sub
	End If
	
	'This might be a person
	colVals = ve.ColumnValues
	If (colVals(4) = "Person") Then
		listResolved( colVals(2) ) = colVals(2)
	Else
		' Group, try to resolve members
		Dim docGroup As notesdocument
		
		Set docGroup = ve.Document
		If Iselement( listGroups( strName ) ) Then
			Exit Sub 'pop up stack
		End If
		
		listGroups( strName ) = "1"
		Forall strMember In docGroup.getitemvalue("Members")
			Call NABResolveName( strMember, listResolved, view, listGroups )	
		End Forall
	End If
	
End Sub
'++LotusScript Development Environment:2:2:NABResolveAllNames:1:8
Sub NABResolveAllNames()
	Dim vSendTo As Variant
	Dim vCopyTo As Variant
	Dim vBlindCopyTo As Variant
	Dim viewPGF As notesview
	Set viewPGF = db.getView("($PeopleGroupsFlat)")
	Dim vNewSendTo() As String
	Dim vNewCopyTo() As String
	Dim vNewBlindCopyTo() As String
	Dim listSendTo List As String
	Dim listCopyTo List As String
	Dim listBlindCopyTo List As String
	Dim listGroups List As String
	Dim iCount As Integer
	
	vSendTo = note.getitemvalue("SendTo")
	Forall strName In vSendTo
		Call NABResolveName( strName, listSendTo, viewPGF, listGroups )		
	End Forall
	
	vCopyTo = note.getitemvalue("CopyTo")
	Forall strName In vCopyTo
		Erase listGroups
		Call NABResolveName( strName, listCopyTo, viewPGF, listGroups )		
	End Forall
	
	vBlindCopyTo = note.getitemvalue("BlindCopyTo")
	Forall strName In vBlindCopyTo
		Erase listGroups
		Call NABResolveName( strName, listBlindCopyTo, viewPGF, listGroups )		
	End Forall
	
	'convert lists to arrays
	iCount = -1
	Forall i In listSendTo
		iCount = iCount + 1
	End Forall
	If (iCount > -1) Then
		Redim vNewSendTo( iCount )
		iCount = 0
		Forall i In listSendTo
			vNewSendTo( iCount ) = i
			iCount = iCount + 1
		End Forall
		Call note.replaceItemValue("SendTo", vNewSendTo )
	End If
	
	iCount = -1
	Forall i In listCopyTo
		iCount = iCount + 1
	End Forall
	If (iCount > -1) Then
		Redim vNewCopyTo( iCount )
		iCount = 0
		Forall i In listCopyTo
			vNewCopyTo( iCount ) = i
			iCount = iCount + 1
		End Forall
		Call note.replaceItemValue("CopyTo", vNewCopyTo )
	End If
	
	iCount = -1
	Forall i In listBlindCopyTo
		iCount = iCount + 1
	End Forall
	If (iCount > -1) Then
		Redim vNewBlindCopyTo( iCount )
		iCount = 0
		Forall i In listBlindCopyTo
			vNewBlindCopyTo( iCount ) = i
			iCount = iCount + 1
		End Forall
		Call note.replaceItemValue("BlindCopyTo", vNewBlindCopyTo )
	End If
	
End Sub





'++LotusScript Development Environment:2:2:MEMOReplyToAll:1:8
Sub MEMOReplyToAll(note As notesdocument)
	Dim session As New notessession	
	Dim vOtherName As Variant	
	Dim vInheritedSendTo As Variant
	Dim strOwnerDomain As Variant
	Dim strItem_Name_CopyTo As String	
	Dim strOwner As String	
	Dim strSenderDomain As String	
	Dim iSenderIndex As Integer
	Dim x As Integer
	
	Dim strInheritedDomain As String
	
	strOwner = CSGetMailFileOwner()
	
	strOwnerDomain = Evaluate(|@Domain|)
	
	If IsDocAltNameCandidate(note) Then
		vInheritedSendTo = note.GetItemValue("InheritedAltSendTo")
	Else
		vInheritedSendTo = note.GetItemValue("InheritedSendTo")
	End If
	
	strInheritedDomain = note.GetItemValue("InheritedFromDomain")(0)
	
	' Remove the sender from the list or mangle return addresses
	vInheritedSendTo = NameCreateCopyList(session.EffectiveUserName,strOwnerDomain(0),strInheritedDomain,_
	vInheritedSendTo)		
	
	If Isarray(vInheritedSendTo) = False Then Exit Sub
	
	If note.GetItemValue("ClientType")(0) = "Web" Then
		strItem_Name_CopyTo = "CopyTo"
		Call note.ReplaceItemValue(strItem_Name_CopyTo, vInheritedSendTo)		
		vInheritedSendTo = Evaluate(|@OptimizeMailAddress(CopyTo)|,note)		
	Else
		strItem_Name_CopyTo = "EnterCopyTo"
		Call note.ReplaceItemValue(strItem_Name_CopyTo, vInheritedSendTo)		
		vInheritedSendTo = Evaluate(|@OptimizeMailAddress(EnterCopyTo)|,note)		
	End If
	
	Call note.ReplaceItemValue(strItem_Name_CopyTo, vInheritedSendTo)
	
End Sub

'++LotusScript Development Environment:2:1:NameConstructIDList:1:8
Function NameConstructIDList(strName As String,strOwnerDomain As String, strFromDomain As String) As Variant
	Dim nUseOwnerDomain As Integer	
	Dim vtmpCompute As Variant	
	Dim strPrimaryName As String
	Dim strAltName As String
	Dim strInternetName As String
	Dim vAllVariations As Variant	
	Redim vAllVariations(0)
	
	'setup the names list
	strPrimaryName = strName
	vtmpCompute = Evaluate(|@UserName(1)|)
	strAltName = vtmpCompute(0)	
	vtmpCompute = Evaluate(|@LocationGetInfo([InternetMailAddress])|)
	strInternetName = vtmpCompute(0)		
	
	If Len(strOwnerDomain) Then
		nUseOwnerDomain = True
	End If
	
	If nUseOwnerDomain Then
		vAllVariations(0) = strPrimaryName & "@" & strOwnerDomain
	Else		
		vAllVariations(0) = strPrimaryName 
	End If
	
	If Strcompare(strPrimaryName,strAltName) Then
		If nUseOwnerDomain Then
			vAllVariations = Arrayappend(vAllVariations,strAltName & "@" & strOwnerDomain)			
		Else		
			vAllVariations = Arrayappend(vAllVariations,strAltName)			
		End If
	End If
	
	If Len(strInternetName) Then
		If Strcompare(strPrimaryName,strInternetName) Then		
			vAllVariations = Arrayappend(vAllVariations,strInternetName)
		End If
	End If		
	
	NameConstructIDList = vAllVariations	
	
End Function

'++LotusScript Development Environment:2:1:Min:1:8
Function Min(nInt1 As Integer, nInt2 As Integer) As Integer
	If nInt1 < nInt2 Then
		Min = nInt2
	Else
		Min = nInt1
	End If
End Function
'++LotusScript Development Environment:2:1:isOEMClient:1:8
Function isOEMClient(session As NotesSession) As Integer
	Dim OEMClient As String
	OEMClient = session.GetEnvironmentString("OEMClient")
	If OEMClient = "1" Then
		isOEMClient = True
	Else
		isOEMClient = False
	End If
End Function
'++LotusScript Development Environment:2:1:NameCreateCopyList:1:8
Function NameCreateCopyList(strName As String,strOwnerDomain As String, strFromDomain As String,vList As Variant) As Variant
	On Error Goto ReturnArrayError
	If Isempty(vList) Then
		Exit Function
	Else
		Dim NameTable As New NotesCSParticipantTable(16)
		Dim NameTableEntry As NotesCSParticipantInstance
		Dim session As New notessession		
		Dim vUserIDs As Variant
		Dim vListOfNames As Variant
		Dim strRecipientDomain As String		
		Dim strRFCPhrase As String
		Dim  nOptimizeLocalDomain As Integer		
		Dim bUsePhrase As Integer		
		Dim nRecipients As Integer
		Dim nPos As Integer
		Dim nWrkpos As Integer
		Dim nCnt As Integer
		Dim nBracket As Integer  
		Dim naddress As Integer 
		Dim newpos As Integer
		Dim strAddress As String
		Dim strdomain1 As String
		Dim strdomain2 As String
		
		' This means that the Notes.INI variable NoOptimizeLocalRouting is tested for a 1 if it exists, we do NOT strip off routing domain info
		nOptimizeLocalDomain = 1 Xor Cint(session.GetEnvironmentValue("NoOptimizeLocalRouting",True))
		
		If Isarray(vList) Then
			Redim vListOfNames(Ubound(vList))
		Else
			Redim vListOfNames(0) As String
		End If
		
		vUserIDs = NameConstructIDList(strName,strOwnerDomain, strFromDomain)
		
		Forall vIDs In vUserIDs
			Call NameTable.AddInstance(vIDs,0,0)													
		End Forall
		
		Forall vIDs In vList
			strAddress = vIDs  ' check for X400 names and bypass the participant table if found
			If  NameByPassTable(strAddress,nOptimizeLocalDomain) Then
				vListOfNames(nRecipients) = vIDs
				nRecipients = nRecipients + 1
			Else
				Call NameTable.AddInstance(vIDs,1,0)						
			End If
		End Forall
		
		If Len(strFromDomain) Then
			strFromDomain = "@" & strFromDomain
		Else
			strFromDomain = ""
		End If
		
		Set NameTableEntry = NameTable.GetFirstInstance()
		
		While Not (NameTableEntry Is Nothing)
			If NameTableEntry.Role > 0 Then ' entry is not a form of current user's address pool
				strRecipientDomain = NameTableEntry.ReplyDomain							
				strRFCPhrase = NameTableEntry.PhraseName				
				bUsePhrase = (Len(strRFCPhrase) > 0)
				
				If bUsePhrase Then 'construct the entry as RFC822
					vListOfNames(nRecipients) = strRFCPhrase & "<" & NameTableEntry.ReplyTo  & "@" & strRecipientDomain & ">" ' & strFromDomain   ' Commented out &strFromDomain
				Else ' construct the basic entry
					vListOfNames(nRecipients) = NameTableEntry.ReplyTo  & "@" & strRecipientDomain ' & strFromDomain   ' Commented out &strFromDomain				End If
				End If 	
				
				If Len(strOwnerDomain) Then 
					nAddress = Instr(Ucase(vListOfNames(nRecipients)), "@" & Ucase(strOwnerDomain))  'Determine if email owner domain is already in address
					If nAddress Then 
						
						strdomain1 = Mid(vListOfNames(nRecipients), nAddress+1)  
						newpos = Instr(strdomain1, "@")   ' find the next @ in the address
						If newpos = 0 Then 
							newpos = Len(vListOfNames(nRecipients))     ' there is no more @s so use the length
						Else
							newpos = (newpos - 1)
						End If
						strdomain2 = Mid(vListOfNames(nRecipients), nAddress +1, newpos)   ' extract the domain information
						If Ucase(strdomain2) = Ucase(strOwnerDomain) Then 
							vListOfNames(nRecipients) = Left(vListOfNames(nRecipients),nAddress+Len(Trim(strOwnerDomain))) 'cut off all excess routing domains from address 
						End If
					Else
						vListOfNames(nRecipients) = vListOfNames(nRecipients) & strFromDomain
					End If
				End If
				
				If nOptimizeLocalDomain Then
					If bUsePhrase Then 
						nPos = Instr(vListOfNames(nRecipients),">")
					Else
						nWrkpos = 1
						nPos = 0 
						nCnt = 0
						Do While nWrkpos
							If nCnt>1 Then 
								nPos = nWrkpos-1
								Exit Do
							End If
							nWrkpos=Instr(nWrkpos+1,vListOfNames(nRecipients),"@")  '
							nCnt = nCnt +1
						Loop
					End If
					
					If nPos Then					
						If Instr(Min(nPos,1),vListOfNames(nRecipients),"@", 1) Then 'remove other routing info on these addresses
							vListOfNames(nRecipients) = Left(vListOfNames(nRecipients),Instr(nPos+1,vListOfNames(nRecipients),"@", 1))			
						End If
					End If
				End If
				
				If (Strcompare(strOwnerDomain,NameExtractDomain(strRecipientDomain),1) = 0) Then				
					vListOfNames(nRecipients) = NameExtractDomain(Cstr(vListOfNames(nRecipients))) & "@" & strOwnerDomain 					
				End If
				nRecipients = nRecipients + 1								
NextInstance:
			End If				
			Set NameTableEntry = NameTable.GetNextInstance()			
		Wend				
	End If					
	
ReturnArray:
	If nRecipients > 0 Then
		Redim Preserve VListOfNames(nRecipients-1)
		NameCreateCopyList = Fulltrim(vListOfNames)
	Else
		Redim Preserve VListOfNames(0)
		NameCreateCopyList = Fulltrim(vListOfNames)		
	End If
	Exit Function
	
ReturnArrayError:
	NameCreateCopyList = vList
	Exit Function	
End Function
'++LotusScript Development Environment:2:1:NameExtractDomain:1:8
Function NameExtractDomain(strDomainString As String) As String
	Dim nOffset As Integer
	nOffset = Instr(strDomainString,"@")
	If nOffset Then
		NameExtractDomain = Strleft(strDomainString,"@")
	Else		
		NameExtractDomain = strDomainString
	End If
End Function

'++LotusScript Development Environment:2:1:NameIsX400:1:8
Function NameIsX400(strName As String) As Integer
	
	If ( Instr(1,strName,"/c=",1) > 0 ) And ( (Instr(1,strName,"/a=",1) > 1) Or ( Instr(1,strName, "/admd=",1)  > 1) ) Then
		NameIsX400 = True
	Else
		NameIsX400 = False
	End If
	
End Function

'++LotusScript Development Environment:2:1:NameIsRoutingDomain:1:8
Function NameIsRoutingDomain(strName As String) As Integer
	Dim bRoutingDomain As Integer
	Dim nPos As Integer
	Dim nStart As Integer
	
	' return true if there is a routing domain
	nStart = 0 
	
	' ignore any "@" found in quotes
	nPos = Instr(strName,|"|)
	If nPos > 0 Then
		nPos = Instr(nPos+1,strName,|"|)		
		If nPos > 0 Then
			nStart = nPos
		End If
	End If
	
	nPos = Instr(nStart+1,strName,"@")
	If nPos > 0 Then
		nPos = Instr(nPos+1,strName,"@")
		If nPos > 0 Then
			NameIsRoutingDomain = True
		Else
			NameIsRoutingDomain = False
		End If
	End If
	
End Function

'++LotusScript Development Environment:2:1:NameBypassTable:1:8
Function NameBypassTable(strName As String, nOptimizeLocalDomain As Integer) As Integer
	
	NameByPassTable = False
	
	If NameIsX400(strName) Then
		NameBypassTable = True
		Exit Function
	Else
		If nOptimizeLocalDomain > 0 Then
			Exit Function
		Else
			If NameIsRoutingDomain(strName) Then
				NameByPassTable = True
			End If
		End If
		
	End If
	
End Function